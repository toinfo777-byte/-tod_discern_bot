# bot/bot.py
import os
import re
import asyncio
import logging
import unicodedata
import zoneinfo
from datetime import datetime, timedelta

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery,
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage


# ================== setup ==================
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

TZ_NAME = os.getenv("TZ", "UTC")
try:
    TZ = zoneinfo.ZoneInfo(TZ_NAME)
except Exception:
    from datetime import timezone as _tz
    TZ = _tz.utc

BUY_URL = os.getenv("BUY_URL", "https://t.me/your_payment_or_landing")
UNLOCK_CODE = os.getenv("UNLOCK_CODE", "TOD2024")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

__BOT_VERSION__ = "kb-1.4-cta-metrics"


# ================== texts ==================
STREAK_MSG_FIRST = "üî• –°–µ—Ä–∏—è –Ω–∞—á–∞–ª–∞—Å—å! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–∞—ë—Ç –±–æ–Ω—É—Å XP."
STREAK_MSG_CONTINUE = "üî• –°–µ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è ‚Äî —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
STREAK_MSG_RESET = "üîÅ –°–µ—Ä–∏—è –Ω–∞—á–∞–ª–∞—Å—å –∑–∞–Ω–æ–≤–æ. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ."


# ================== FSM ==================
class ATest(StatesGroup):
    waiting_answer = State()

class BTest(StatesGroup):
    waiting_answer = State()


# ================== utils ==================
NUMS = ["‚ë†", "‚ë°", "‚ë¢", "‚ë£", "‚ë§", "‚ë•", "‚ë¶", "‚ëß"]
RE_LEADING_NUM = re.compile(r"^\s*(\d+)[\.\)]?\s*")
ZWS = "".join(chr(c) for c in [0x200B, 0x200C, 0x200D, 0xFE0F, 0x20E3, 0x20DD])

def normalize_text(s: str) -> str:
    if not s:
        return ""
    s = unicodedata.normalize("NFKC", s)
    for ch in ZWS:
        s = s.replace(ch, "")
    return s.strip()

def build_kb_and_labels(options: list[str]) -> tuple[ReplyKeyboardMarkup, list[str]]:
    labels = []
    rows = []
    for i, o in enumerate(options):
        prefix = NUMS[i] if i < len(NUMS) else f"{i+1}."
        label = f"{prefix} {o}"
        labels.append(label)
        rows.append([KeyboardButton(text=label)])
    kb = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, one_time_keyboard=True)
    return kb, labels

def reserve_parse_index(text: str, n_options: int) -> int | None:
    t = normalize_text(text or "")
    m = RE_LEADING_NUM.match(t)
    if m:
        k = int(m.group(1))
        if 1 <= k <= n_options:
            return k - 1
    return None


# ================== in-memory DB ==================
DB: dict[str, dict] = {}
def _ensure_user(user_ref: str):
    if user_ref not in DB:
        DB[user_ref] = {
            "progress": {"A": 0, "B": 0},
            "xp": 0,
            "streak": 0,
            "last_day": None,
            "badges": set(),
            "premium": False,
            "events": [],   # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }

def init_db():
    logging.info("DB initialized (in-memory)")

def has_premium(user_ref: str) -> bool:
    _ensure_user(user_ref)
    return DB[user_ref]["premium"]

def get_progress(user_ref: str) -> dict:
    _ensure_user(user_ref)
    return DB[user_ref]["progress"]

def get_xp(user_ref: str) -> int:
    _ensure_user(user_ref)
    return DB[user_ref]["xp"]

def add_xp(user_ref: str, xp: int):
    _ensure_user(user_ref)
    DB[user_ref]["xp"] += xp

def add_progress(user_ref: str, task_id: str, xp: int, badge: str | None):
    _ensure_user(user_ref)
    block = task_id[0]
    DB[user_ref]["progress"][block] = DB[user_ref]["progress"].get(block, 0) + 1
    add_xp(user_ref, xp)
    if badge:
        DB[user_ref]["badges"].add(badge)

def apply_daily_streak(user_ref: str) -> tuple[int, int, bool, str]:
    _ensure_user(user_ref)
    today = datetime.now(TZ).date()
    last_day = DB[user_ref]["last_day"]
    streak = DB[user_ref]["streak"]
    is_new_day = last_day != today
    mode = ""
    bonus = 0
    if is_new_day:
        if last_day == today - timedelta(days=1):
            streak += 1
            mode = "continue"
        elif last_day is None:
            streak = 1
            mode = "first"
        else:
            streak = 1
            mode = "reset"
        bonus = streak * 10
        DB[user_ref]["streak"] = streak
        DB[user_ref]["last_day"] = today
    return bonus, streak, is_new_day, mode

def is_level_completed(user_ref: str, block: str) -> bool:
    total = len(TASKS_A) if block == "A" else len(TASKS_B)
    return get_progress(user_ref).get(block, 0) >= total


# ================== analytics ==================
AN = {
    "starts_a": 0,
    "starts_b": 0,
    "cta_buy_clicks": 0,
    "cta_paid_clicks": 0,
    "unlock_success": 0,
    "unlock_fail": 0,
    "answers_total": 0,
    "answers_correct": 0,
    "task_shown": {},
    "task_answered": {},
    "task_correct": {},
}

def an_inc(key: str, subkey: str | None = None, add: int = 1):
    if subkey is None:
        AN[key] = AN.get(key, 0) + add
    else:
        bucket = AN.get(key)
        if not isinstance(bucket, dict):
            bucket = {}
            AN[key] = bucket
        bucket[subkey] = bucket.get(subkey, 0) + add

def an_dump_text() -> str:
    lines = []
    lines.append("üìà <b>–ú–µ—Ç—Ä–∏–∫–∏</b>")
    lines.append(f"‚Ä¢ –°—Ç–∞—Ä—Ç A: {AN['starts_a']}, –°—Ç–∞—Ä—Ç B: {AN['starts_b']}")
    lines.append(f"‚Ä¢ CTA ‚Äò–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø‚Äô: {AN['cta_buy_clicks']}")
    lines.append(f"‚Ä¢ CTA ‚Äò–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)‚Äô: {AN['cta_paid_clicks']}")
    lines.append(f"‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: ok {AN['unlock_success']}, fail {AN['unlock_fail']}")
    lines.append(f"‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤: –≤—Å–µ–≥–æ {AN['answers_total']}, –≤–µ—Ä–Ω—ã—Ö {AN['answers_correct']}")
    if AN["task_shown"]:
        lines.append("\n<b>–ü–æ–∫–∞–∑—ã –∑–∞–¥–∞—á:</b>")
        for k, v in sorted(AN["task_shown"].items(), key=lambda kv: kv[1], reverse=True):
            ans = AN["task_answered"].get(k, 0)
            cor = AN["task_correct"].get(k, 0)
            lines.append(f"‚Ä¢ {k}: –ø–æ–∫–∞–∑–æ–≤ {v}, –æ—Ç–≤–µ—Ç–æ–≤ {ans}, –≤–µ—Ä–Ω—ã—Ö {cor}")
    return "\n".join(lines)


# ================== tasks ==================
TASKS_A = [
    {"id":"A1","text":"¬´–í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –≤—Å–µ–≥–¥–∞ —Å–∞–º–∞—è –≤–∫—É—Å–Ω–∞—è –µ–¥–∞¬ª. –ß—Ç–æ —ç—Ç–æ?",
     "options":["–§–∞–∫—Ç","–ú–Ω–µ–Ω–∏–µ"],"answer":"–ú–Ω–µ–Ω–∏–µ",
     "explain":"¬´–°–∞–º–∞—è –≤–∫—É—Å–Ω–∞—è¬ª ‚Äî –æ—Ü–µ–Ω–∫–∞, –∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Ñ–∞–∫—Ç.","xp":10,"badge":None},
    {"id":"A2","text":"¬´–ß–µ–ª–æ–≤–µ–∫ —Å—Ç–æ–∏—Ç –ø–æ–¥ –¥–æ–∂–¥—ë–º –±–µ–∑ –∑–æ–Ω—Ç–∞, –æ–Ω –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –ø—Ä–æ—Å—Ç—É–¥–∏—Ç—Å—è¬ª. –ß—Ç–æ —ç—Ç–æ?",
     "options":["–§–∞–∫—Ç","–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è/–ø—Ä–æ–≥–Ω–æ–∑"],"answer":"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è/–ø—Ä–æ–≥–Ω–æ–∑",
     "explain":"–§–∞–∫—Ç ‚Äî —Ç–æ–ª—å–∫–æ ¬´—Å—Ç–æ–∏—Ç –ø–æ–¥ –¥–æ–∂–¥—ë–º¬ª. –ü—Ä–æ—Å—Ç—É–¥–∞ ‚Äî –ø—Ä–æ–≥–Ω–æ–∑.","xp":10,"badge":None},
    {"id":"A3","text":"¬´–í—Å–µ —É–º–Ω—ã–µ –ª—é–¥–∏ –ø–æ–∫—É–ø–∞—é—Ç —ç—Ç–æ—Ç –∫—É—Ä—Å¬ª. –ß—Ç–æ —ç—Ç–æ?",
     "options":["–§–∞–∫—Ç","–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è"],"answer":"–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è",
     "explain":"–î–∞–≤–ª–µ–Ω–∏–µ ¬´–≤—Å–µ —É–º–Ω—ã–µ¬ª –∞–ø–µ–ª–ª–∏—Ä—É–µ—Ç –∫ —Å—Ç–∞—Ç—É—Å—É, –Ω–µ –∫ –∏—Å—Ç–∏–Ω–µ.","xp":10,"badge":None},
    {"id":"A4","text":"¬´–≠—Ç—É –Ω–æ–≤–æ—Å—Ç—å —Å–∫–∞–∑–∞–ª –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä, –∑–Ω–∞—á–∏—Ç, –æ–Ω–∞ –≤–µ—Ä–Ω–∞—è¬ª. –ß—Ç–æ —ç—Ç–æ?",
     "options":["–§–∞–∫—Ç","–ê—Ä–≥—É–º–µ–Ω—Ç –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É"],"answer":"–ê—Ä–≥—É–º–µ–Ω—Ç –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É",
     "explain":"–°—Ç–∞—Ç—É—Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ‚â† –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.","xp":10,"badge":None},
    {"id":"A5","text":"¬´–õ—é–¥–∏ –≤ –æ—á–∫–∞—Ö —á–∞—â–µ —á–∏—Ç–∞—é—Ç –∫–Ω–∏–≥–∏. –ó–Ω–∞—á–∏—Ç, –æ—á–∫–∏ –¥–µ–ª–∞—é—Ç —É–º–Ω–µ–µ¬ª. –ß—Ç–æ —ç—Ç–æ?",
     "options":["–§–∞–∫—Ç","–õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"],"answer":"–õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
     "explain":"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è ‚â† –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç—å.","xp":10,"badge":None},
    {"id":"A6","text":"¬´–≠—Ç–æ—Ç —Å–ø–∏–∫–µ—Ä –±–æ–≥–∞—Ç ‚Äî –∑–Ω–∞—á–∏—Ç, –µ–≥–æ –∏–¥–µ–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ¬ª. –ß—Ç–æ —ç—Ç–æ?",
     "options":["–ê—Ä–≥—É–º–µ–Ω—Ç","–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è"],"answer":"–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è",
     "explain":"–ê–ø–µ–ª–ª—è—Ü–∏—è –∫ —É—Å–ø–µ—Ö—É/—Å—Ç–∞—Ç—É—Å—É –≤–º–µ—Å—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.","xp":10,"badge":None},
    {"id":"A7","text":"¬´–ü–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è CRM –≤—ã—Ä–æ—Å–ª–∏ –ø—Ä–æ–¥–∞–∂–∏. –ó–Ω–∞—á–∏—Ç, CRM –∏—Ö –≤—ã–∑–≤–∞–ª–∞¬ª. –ß—Ç–æ —ç—Ç–æ?",
     "options":["–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç—å","–õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"],"answer":"–õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
     "explain":"–ü–æ—Å—Ç hoc: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚â† –ø—Ä–∏—á–∏–Ω–∞.","xp":10,"badge":None},
    {"id":"A8","text":"¬´–í –≥–æ—Ä–æ–¥–µ —Å—Ç–∞–ª–æ –±–æ–ª—å—à–µ –∑–æ–Ω—Ç–æ–≤, –∑–Ω–∞—á–∏—Ç, —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å –¥–æ–∂–¥–∏¬ª. –ß—Ç–æ —ç—Ç–æ?",
     "options":["–õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞","–§–∞–∫—Ç"],"answer":"–õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
     "explain":"–ó–æ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º, –∞ –Ω–µ –ø—Ä–∏—á–∏–Ω–æ–π.","xp":10,"badge":None},
    {"id":"A9","text":"¬´–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: —á–∏—Ç–∞—é—â–∏–µ —á–∞—â–µ –Ω–æ—Å—è—Ç –æ—á–∫–∏. –û—á–∫–∏ —É–ª—É—á—à–∞—é—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç¬ª. –ß—Ç–æ —ç—Ç–æ?",
     "options":["–ê—Ä–≥—É–º–µ–Ω—Ç","–õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"],"answer":"–õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
     "explain":"–í—ã–≤–æ–¥ –Ω–µ —Å–ª–µ–¥—É–µ—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è).","xp":10,"badge":None},
    {"id":"A10","text":"¬´–≠—Ç–æ—Ç —ç–∫—Å–ø–µ—Ä—Ç –ø–æ–ø—É–ª—è—Ä–µ–Ω –∏ —É–≤–∞–∂–∞–µ–º, –µ–≥–æ –º–Ω–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ¬ª. –ß—Ç–æ —ç—Ç–æ?",
     "options":["–ê—Ä–≥—É–º–µ–Ω—Ç –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É","–§–∞–∫—Ç"],"answer":"–ê—Ä–≥—É–º–µ–Ω—Ç –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É",
     "explain":"–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å/–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç ‚Äî –Ω–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –∏—Å—Ç–∏–Ω—ã.","xp":10,"badge":None},
]

TASKS_B = [
    {"id":"B1","text":"–ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è B1: –≤—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.",
     "options":["–í–∞—Ä–∏–∞–Ω—Ç A","–í–∞—Ä–∏–∞–Ω—Ç B"],"answer":"–í–∞—Ä–∏–∞–Ω—Ç A",
     "explain":"–î–µ–º–æ-–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.","xp":20,"badge":"B-starter"},
]


# ================== helpers ==================
async def send_task(m: Message, state: FSMContext, task: dict, block: str):
    kb, labels = build_kb_and_labels(task["options"])
    await state.update_data(task_index=task.get("_idx", 0), labels=labels, block=block)
    await m.answer(f"–ó–∞–¥–∞–Ω–∏–µ {task['id']}:\n{task['text']}", reply_markup=kb)
    an_inc("task_shown", task["id"], 1)

async def finish_if_needed(user_ref: str, m: Message, block: str):
    if block == "A" and is_level_completed(user_ref, "A"):
        await m.answer("üèÖ –ë–µ–π–¥–∂ —É—Ä–æ–≤–Ω—è A –ø–æ–ª—É—á–µ–Ω!")
    if block == "B" and is_level_completed(user_ref, "B"):
        await m.answer("üèÖ –ë–µ–π–¥–∂ —É—Ä–æ–≤–Ω—è B –ø–æ–ª—É—á–µ–Ω!")

def cta_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîì –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø (30+)", callback_data="cta_buy"),
    ], [
        InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="cta_paid"),
    ]])

async def send_cta_after_A(m: Message):
    await m.answer(
        "üöÄ –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: 30+ –∑–∞–¥–∞–Ω–∏–π —É—Ä–æ–≤–Ω—è B, –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –±–µ–π–¥–∂–∏?\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏ ¬´–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø¬ª ‚Äî –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É\n"
        "‚Ä¢ –£–∂–µ –æ–ø–ª–∞—Ç–∏–ª(–∞)? –ù–∞–∂–º–∏ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª",
        reply_markup=cta_keyboard()
    )


# ================== commands ==================
@dp.message(CommandStart())
async def cmd_start(m: Message, state: FSMContext):
    await state.clear()
    user_ref = f"tg:{m.from_user.id}"
    premium = has_premium(user_ref)
    pay_hint = "" if premium else "\n\n–ù–∞—á–Ω–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–ª–æ–∫: /a_start"
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ <b>Test of Discernment</b> ‚Äî —Ç—Ä–µ–Ω–∞–∂—ë—Ä —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚Ä¢ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (30+ –∑–∞–¥–∞–Ω–∏–π, –ø—Ä–æ–≥—Ä–µ—Å—Å, –ø–æ–¥—Å–∫–∞–∑–∫–∏)"
        + pay_hint,
        reply_markup=ReplyKeyboardRemove(),
    )

@dp.message(Command("version"))
async def version(m: Message):
    await m.answer(f"bot version: {__BOT_VERSION__}")

@dp.message(Command("metrics"))
async def metrics(m: Message):
    await m.answer(an_dump_text())

@dp.message(Command("progress"))
async def progress(m: Message):
    user_ref = f"tg:{m.from_user.id}"
    xp = get_xp(user_ref)
    p = get_progress(user_ref)
    streak = DB[user_ref]["streak"]
    await m.answer(
        f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å</b>\n"
        f"A: <b>{p.get('A',0)}/{len(TASKS_A)}</b>\n"
        f"B: <b>{p.get('B',0)}/{len(TASKS_B)}</b>\n"
        f"XP: <b>{xp}</b>   Streak: <b>{streak}</b> –¥–Ω–µ–π",
        reply_markup=ReplyKeyboardRemove(),
    )

@dp.message(Command("cancel"))
async def cancel(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ.", reply_markup=ReplyKeyboardRemove())

@dp.message(Command("a_start"))
async def a_start(m: Message, state: FSMContext):
    an_inc("starts_a", add=1)
    await state.clear()
    await state.set_state(ATest.waiting_answer)
    for i, t in enumerate(TASKS_A):
        t["_idx"] = i
    await send_task(m, state, TASKS_A[0], "A")

@dp.message(Command("b_start"))
async def b_start(m: Message, state: FSMContext):
    an_inc("starts_b", add=1)
    await state.clear()
    await state.set_state(BTest.waiting_answer)
    for i, t in enumerate(TASKS_B):
        t["_idx"] = i
    await send_task(m, state, TASKS_B[0], "B")

@dp.message(Command("unlock"))
async def unlock(m: Message, state: FSMContext):
    user_ref = f"tg:{m.from_user.id}"
    parts = (m.text or "").split(maxsplit=1)
    code = parts[1].strip() if len(parts) > 1 else ""
    if code == UNLOCK_CODE:
        DB[user_ref]["premium"] = True
        an_inc("unlock_success", add=1)
        await m.answer("‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç! –ó–∞–ø—É—Å–∫–∞—é —É—Ä–æ–≤–µ–Ω—å B‚Ä¶", reply_markup=ReplyKeyboardRemove())
        await b_start(m, state)
    else:
        an_inc("unlock_fail", add=1)
        await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å –∏ –ø—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑: /unlock –ö–û–î")


# ================== CTA callbacks ==================
@dp.callback_query(F.data == "cta_buy")
async def cta_buy(c: CallbackQuery):
    an_inc("cta_buy_clicks", add=1)
    await c.answer()  # –∑–∞–∫—Ä—ã—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
    await c.message.answer(
        "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:\n"
        f"{BUY_URL}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏ –∫–æ–¥: <code>/unlock –ö–û–î</code>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø", url=BUY_URL)
        ]])
    )

@dp.callback_query(F.data == "cta_paid")
async def cta_paid(c: CallbackQuery):
    an_inc("cta_paid_clicks", add=1)
    await c.answer("–ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∏–ª(–∞), –ø—Ä–∏—à–ª–∏: /unlock –ö–û–î", show_alert=True)


# ================== engine ==================
async def handle_answer(m: Message, state: FSMContext, tasks: list[dict], block: str):
    data = await state.get_data()
    idx = data.get("task_index", 0)
    labels: list[str] = data.get("labels", [])
    if idx >= len(tasks):
        await m.answer("–ë–ª–æ–∫ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return
    task = tasks[idx]
    user_ref = f"tg:{m.from_user.id}"

    an_inc("answers_total", add=1)
    an_inc("task_answered", task["id"], 1)

    text = normalize_text(m.text)
    choice = None

    for i, lbl in enumerate(labels):
        if text == normalize_text(lbl):
            choice = i
            break
    if choice is None:
        choice = reserve_parse_index(text, len(task["options"]))
    if choice is None:
        for i, opt in enumerate(task["options"]):
            if text.casefold() == normalize_text(opt).casefold():
                choice = i
                break
    if choice is None:
        kb, _ = build_kb_and_labels(task["options"])
        await m.answer("–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ü–∏—Ñ—Ä—É 1/2/3:", reply_markup=kb)
        return

    is_correct = (normalize_text(task["options"][choice]).casefold()
                  == normalize_text(task["answer"]).casefold())
    if is_correct:
        an_inc("answers_correct", add=1)
        an_inc("task_correct", task["id"], 1)
        bonus, streak_count, is_new_day, mode = apply_daily_streak(user_ref)
        add_progress(user_ref, task["id"], task["xp"], task["badge"])
        msg = f"‚úÖ –í–µ—Ä–Ω–æ! {task['explain']}\n+{task['xp']} XP"
        if is_new_day and bonus:
            add_xp(user_ref, bonus)
            msg += f"\nüî• –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è: +{bonus} XP (streak {streak_count} –¥–Ω.)"
        if task["badge"]:
            msg += f"\nüèÖ –ù–æ–≤—ã–π –±–µ–π–¥–∂: {task['badge']}"
        await m.answer(msg, reply_markup=ReplyKeyboardRemove())
        if is_new_day:
            if mode == "first": await m.answer(STREAK_MSG_FIRST)
            elif mode == "continue": await m.answer(STREAK_MSG_CONTINUE)
            elif mode == "reset": await m.answer(STREAK_MSG_RESET)
    else:
        await m.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. {task['explain']}", reply_markup=ReplyKeyboardRemove())

    # next / finish
    if idx + 1 < len(tasks):
        await asyncio.sleep(0.03)
        await state.update_data(task_index=idx + 1)
        next_task = tasks[idx + 1]
        await send_task(m, state, next_task, block)
    else:
        if block == "A":
            await m.answer("üéâ –¢—ã –ø—Ä–æ—à—ë–ª –±–ª–æ–∫ A1‚ÄìA10! –ü–æ—Å–º–æ—Ç—Ä–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å: /progress")
            await send_cta_after_A(m)
        else:
            await m.answer("üéâ –£—Ä–æ–≤–µ–Ω—å B –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ—Å–º–æ—Ç—Ä–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å: /progress")
        await finish_if_needed(user_ref, m, block)
        await state.clear()


@dp.message(ATest.waiting_answer, F.text)
async def a_answer(m: Message, state: FSMContext):
    await handle_answer(m, state, TASKS_A, "A")

@dp.message(BTest.waiting_answer, F.text)
async def b_answer(m: Message, state: FSMContext):
    await handle_answer(m, state, TASKS_B, "B")


# ================== entry ==================
async def main():
    init_db()
    logging.info("Starting bot polling‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
