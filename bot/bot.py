# bot/bot.py
# ==============================
# Multi-bot (A/B/HARD) ‚Äî aiogram v3
# ==============================

import os
import asyncio
import logging
from dataclasses import dataclass
from typing import List, Dict, Tuple, Optional
from collections import Counter

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv


# ---------- –∑–∞–≥—Ä—É–∑–∫–∞ –ø—É–ª–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ ----------
# tasks.py    -> –±–∞–∑–æ–≤—ã–π (A)
# tasks_b.py  -> –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (B)
# tasks_hard.py -> HARD
def _try_import(module_name: str):
    try:
        return __import__(module_name, fromlist=["*"])
    except Exception:
        return None


def _resolve_tasks_var(mod, names: List[str]) -> List[dict]:
    """–î–æ—Å—Ç–∞—ë–º TASKS / TASKS_A / TASKS_B / TASKS_HARD –∏–∑ –º–æ–¥—É–ª—è."""
    for n in names:
        if mod and hasattr(mod, n):
            v = getattr(mod, n)
            if isinstance(v, list):
                return v
    return []


_m_a = _try_import("bot.tasks") or _try_import("tasks")
_m_b = _try_import("bot.tasks_b") or _try_import("tasks_b")
_m_h = _try_import("bot.tasks_hard") or _try_import("tasks_hard")

TASKS_A: List[dict] = _resolve_tasks_var(_m_a, ["TASKS_A", "TASKS"])
TASKS_B: List[dict] = _resolve_tasks_var(_m_b, ["TASKS_B", "TASKS"])
TASKS_HARD: List[dict] = _resolve_tasks_var(_m_h, ["TASKS_HARD", "TASKS"])

LEVEL_POOLS: Dict[str, List[dict]] = {
    "A": TASKS_A,
    "B": TASKS_B,
    "HARD": TASKS_HARD,
}

ALL_LEVELS = ("A", "B", "HARD")


# ---------- —É—Ç–∏–ª–∏—Ç—ã ----------
def _norm(s: str) -> str:
    return (s or "").strip().casefold()


def answers_kb(options: List[str]) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=opt, callback_data=f"ans:{i}")]
            for i, opt in enumerate(options)]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def again_or_level_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="again")],
        [InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="picklevel")],
    ])


def level_picker_kb(allowed: Optional[set] = None) -> InlineKeyboardMarkup:
    allowed = allowed or set(ALL_LEVELS)
    buttons = []
    if "A" in allowed:
        buttons.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å A", callback_data="lvl:A")])
    if "B" in allowed:
        buttons.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å B", callback_data="lvl:B")])
    if "HARD" in allowed:
        buttons.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å HARD", callback_data="lvl:HARD")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ---------- ¬´–ø–æ—Ä—Ç—Ä–µ—Ç¬ª –¥–ª—è HARD ----------
WEAK_HINTS = {
    "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è": "–ü—Ä–æ–≤–µ—Ä—å: –Ω–µ—Ç –ª–∏ –æ–±—â–µ–π –ø—Ä–∏—á–∏–Ω—ã –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è?",
    "–û–±—Ä–∞—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç—å": "–£–±–µ–¥–∏—Å—å –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: –ø—Ä–∏—á–∏–Ω–∞ –∏ —Å–ª–µ–¥—Å—Ç–≤–∏–µ –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞–Ω—ã?",
    "–í—ã–∂–∏–≤—à–∏–π –Ω–∞–±–æ—Ä": "–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –Ω–µ–≤–∏–¥–∏–º—É—é —á–∞—Å—Ç—å –≤—ã–±–æ—Ä–∫–∏: –≥–¥–µ –ø—Ä–æ–≤–∞–ª—ã/–æ—à–∏–±–∫–∏?",
    "–°–∫–æ–ª—å–∑–∫–∞—è –¥–æ—Ä–æ–∂–∫–∞": "–¢—Ä–µ–±—É–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–≤–µ–Ω—å—è –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏.",
    "–ö–æ–º–ø–æ–∑–∏—Ü–∏—è": "–°–≤–æ–π—Å—Ç–≤–∞ —Ü–µ–ª–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —á–∞—Å—Ç–∏ (–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç).",
    "Post hoc": "–ü–æ—Å–ª–µ ‚â† –∏–∑-–∑–∞. –ù—É–∂–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤.",
    "–õ–æ–∂–Ω–∞—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞": "–†–µ–¥–∫–æ –±—ã–≤–∞–µ—Ç –æ–¥–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—å –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã.",
    "–ê–ø–µ–ª–ª—è—Ü–∏—è –∫ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É": "–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å ‚â† –∏—Å—Ç–∏–Ω–∞. –ò—â–∏ –º–µ—Ç–æ–¥ –∏ –¥–∞–Ω–Ω—ã–µ.",
    "–ê–ø–µ–ª–ª—è—Ü–∏—è –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É": "–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç –ø–æ–º–æ–≥–∞–µ—Ç, –Ω–æ –ø—Ä–æ—Å–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞.",
    "–ê–Ω–µÃÅ–∫–¥–æ—Ç": "–û–¥–∏–Ω —Å–ª—É—á–∞–π ‚Äî –Ω–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –ù—É–∂–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
}


def build_hard_summary(passed: List[dict], wrong: List[dict]) -> str:
    if not passed and not wrong:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –Ω–∞ HARD."

    wrong_labels = [t.get("answer", "").strip() for t in wrong if t.get("answer")]
    top = Counter(wrong_labels).most_common(2)

    lines = []
    if top:
        lines.append("üîé **–ì–¥–µ —á–∞—â–µ –ø—Ä–æ–º–∞—Ö:**")
        for label, cnt in top:
            hint = WEAK_HINTS.get(label, "–†–∞–∑–≤–µ—Ä–Ω–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º –∏ –ø—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ.")
            lines.append(f"‚Ä¢ {label} ‚Äî {cnt} —Ä–∞–∑(–∞). {hint}")
        lines.append("")

    lines.append("üí° –°–æ–≤–µ—Ç—ã:\n"
                 "‚Äî –ó–∞–º–µ–¥–ª—è–π—Å—è –Ω–∞ –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç–∏ –∏ –≤—ã–±–æ—Ä–∫–∞—Ö.\n"
                 "‚Äî –ò—â–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.\n"
                 "‚Äî –ü—Ä–æ—Å–∏ –º–µ—Ç–æ–¥/–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –∞ –Ω–µ —Å—Ç–∞—Ç—É—Å/–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å.")
    return "\n".join(lines)


# ---------- –ø–æ–ª–∏—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ bot_id ----------
# –∑–∞–º–µ–Ω–∏ id –Ω–∞ —Å–≤–æ–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
BOT_LEVEL_POLICY: Dict[int, Dict[str, object]] = {
    # @tod_discern_bot
    8222973157: {"default": "A", "allowed": {"A", "B", "HARD"}},
    # @discernment_test_bot
    8416181261: {"default": "B", "allowed": {"B", "HARD"}},
}


# ---------- —Å—Ç–∞—Ä—Ç/–ø–æ–¥–∞—á–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ----------
async def present_task(m: Message | CallbackQuery, state: FSMContext):
    data = await state.get_data()
    idx = data.get("idx", 0)
    tasks = data.get("tasks", [])
    total = len(tasks)

    if idx >= total:
        # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        score = data.get("score", 0)
        level = data.get("level", "A")
        msg = f"–ì–æ—Ç–æ–≤–æ! –ò—Ç–æ–≥: {score}/{total}\n"

        # –¥–æ–±–∞–≤–∏–º ¬´–ø–æ—Ä—Ç—Ä–µ—Ç¬ª –¥–ª—è HARD
        if level == "HARD":
            passed = data.get("answered_ok", [])
            wrong = data.get("answered_err", [])
            msg += "\n" + build_hard_summary(passed, wrong)

        if isinstance(m, CallbackQuery):
            await m.message.answer(msg, reply_markup=again_or_level_kb())
        else:
            await m.answer(msg, reply_markup=again_or_level_kb())
        await state.clear()
        return

    task = tasks[idx]
    txt = f"–ó–∞–¥–∞–Ω–∏–µ {idx + 1}/{total}:\n¬´{task['text']}¬ª\n–ß—Ç–æ —ç—Ç–æ?"
    kb = answers_kb(task["options"])

    if isinstance(m, CallbackQuery):
        await m.message.answer(txt, reply_markup=kb)
    else:
        await m.answer(txt, reply_markup=kb)


async def start_quiz(message: Message, state: FSMContext, bot_id: int, level: Optional[str] = None):
    policy = BOT_LEVEL_POLICY.get(bot_id, {"default": "A", "allowed": set(ALL_LEVELS)})
    allowed = set(policy.get("allowed", set(ALL_LEVELS)))
    level = (level or policy.get("default", "A")).upper()

    if level not in allowed or level not in LEVEL_POOLS or not LEVEL_POOLS[level]:
        # –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å
        await message.answer(
            "–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:",
            reply_markup=level_picker_kb(allowed),
        )
        await state.clear()
        return

    await state.set_data({
        "level": level,
        "tasks": LEVEL_POOLS[level][:],  # –∫–æ–ø–∏—è
        "idx": 0,
        "score": 0,
        "answered_ok": [],
        "answered_err": [],
    })

    intro = (
        "–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ?\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: A (–±–∞–∑–æ–≤—ã–π), B (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π), HARD (—Ö–∞—Ä–¥).\n"
        "–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ‚Äî –∫–Ω–æ–ø–∫–æ–π **–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å** –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ `/level A`, `/level B`, `/level HARD`."
    )
    await message.answer(intro, parse_mode=None)
    await present_task(message, state)


# ---------- —Ö–µ–Ω–¥–ª–µ—Ä—ã ----------
async def on_start(message: Message, state: FSMContext):
    bot_id = message.bot.id
    await start_quiz(message, state, bot_id)


async def cmd_level(message: Message, state: FSMContext):
    bot_id = message.bot.id
    policy = BOT_LEVEL_POLICY.get(bot_id, {"default": "A", "allowed": set(ALL_LEVELS)})
    allowed = set(policy.get("allowed", set(ALL_LEVELS)))

    # /level [A|B|HARD]
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) == 2:
        lvl = parts[1].strip().upper()
        if lvl in allowed and lvl in LEVEL_POOLS and LEVEL_POOLS[lvl]:
            await message.answer(f"–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ {lvl}.")
            await start_quiz(message, state, bot_id, level=lvl)
            return
        else:
            await message.answer("–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã–±–µ—Ä–∏ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_picker_kb(allowed))


async def cb_pick_level(call: CallbackQuery, state: FSMContext):
    bot_id = call.bot.id
    policy = BOT_LEVEL_POLICY.get(bot_id, {"default": "A", "allowed": set(ALL_LEVELS)})
    allowed = set(policy.get("allowed", set(ALL_LEVELS)))

    lvl = call.data.split(":", 1)[1]
    if lvl in allowed and lvl in LEVEL_POOLS and LEVEL_POOLS[lvl]:
        await call.message.answer(f"–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ {lvl}.")
        await start_quiz(call.message, state, bot_id, level=lvl)
    else:
        await call.message.answer("–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã–±–µ—Ä–∏ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:",
                                  reply_markup=level_picker_kb(allowed))
    await call.answer()


async def cb_again(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lvl = data.get("level", "A")
    await state.clear()
    await call.answer()
    # —Å—Ç–∞—Ä—Ç—É–µ–º –∑–∞–Ω–æ–≤–æ –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ
    await start_quiz(call.message, state, call.bot.id, level=lvl)


async def cb_picklevel_button(call: CallbackQuery, state: FSMContext):
    bot_id = call.bot.id
    policy = BOT_LEVEL_POLICY.get(bot_id, {"default": "A", "allowed": set(ALL_LEVELS)})
    allowed = set(policy.get("allowed", set(ALL_LEVELS)))
    await call.message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_picker_kb(allowed))
    await call.answer()


async def cb_answer(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    idx = data.get("idx", 0)
    tasks = data.get("tasks", [])
    if idx >= len(tasks):
        await call.answer()
        return

    task = tasks[idx]
    answer_i = int(call.data.split(":", 1)[1])
    picked = task["options"][answer_i]
    correct = _norm(picked) == _norm(task["answer"])

    # –∫–æ–ø–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è ¬´–ø–æ—Ä—Ç—Ä–µ—Ç–∞¬ª
    ok_list = data.get("answered_ok", [])
    er_list = data.get("answered_err", [])
    if correct:
        ok_list.append(task)
    else:
        er_list.append(task)
    await state.update_data(answered_ok=ok_list, answered_err=er_list)

    if correct:
        await call.message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
        await state.update_data(score=data.get("score", 0) + 1)
    else:
        await call.message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}.\n{task.get('explain','').strip()}")

    await state.update_data(idx=idx + 1)
    await call.answer()
    await present_task(call, state)


# ---------- –∑–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ—Ç–æ–≤ ----------
async def run_single_bot(token: str):
    bot = Bot(token=token)  # parse_mode –Ω–µ –∑–∞–¥–∞—ë–º (aiogram>=3.7)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(on_start, CommandStart())
    dp.message.register(cmd_level, F.text.startswith("/level"))
    dp.callback_query.register(cb_pick_level, F.data.startswith("lvl:"))
    dp.callback_query.register(cb_again, F.data == "again")
    dp.callback_query.register(cb_picklevel_button, F.data == "picklevel")
    dp.callback_query.register(cb_answer, F.data.startswith("ans:"))

    logging.info("Starting polling for bot‚Ä¶")
    await dp.start_polling(bot)


async def main():
    logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
    load_dotenv()

    tokens: List[str] = []
    for key in ("BOT_TOKEN", "BOT_TOKEN2"):
        t = os.getenv(key, "").strip()
        if t:
            tokens.append(t)

    if not tokens:
        raise RuntimeError("–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤: –¥–æ–±–∞–≤—å BOT_TOKEN (–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ BOT_TOKEN2) –≤ Railway Variables")

    await asyncio.gather(*(run_single_bot(t) for t in tokens))


if __name__ == "__main__":
    asyncio.run(main())
