# bot/bot.py
# ==========================================================
# Multi-bot | —É—Ä–æ–≤–Ω–∏ A / B / HARD | aiogram v3
# –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: idempotency –ø–æ message_id + safe_answer
# ==========================================================

import os
import asyncio
import logging
import contextlib
from dataclasses import dataclass
from typing import Dict, List, Tuple, Optional, Set

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest
from dotenv import load_dotenv

# ---------- –ü—É–ª—ã –≤–æ–ø—Ä–æ—Å–æ–≤ ----------
try:
    from .tasks import TASKS as TASKS_A
except Exception:
    from .tasks import TASKS_A  # type: ignore

try:
    from .tasks_b import TASKS as TASKS_B
except Exception:
    from .tasks_b import TASKS_B  # type: ignore

try:
    from .tasks_hard import TASKS as TASKS_HARD
except Exception:
    try:
        from .tasks_hard import TASKS_HARD  # type: ignore
    except Exception:
        TASKS_HARD = []

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("bot")

# ---------- –•–µ–ª–ø–µ—Ä—ã ----------
def _norm(s: str) -> str:
    return (s or "").strip().casefold()

# –ü–æ–ª–∏—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ –±–æ—Ç–∞–º (–∑–∞–º–µ–Ω–∏ id –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
BOT_LEVEL_POLICY: Dict[int, Dict[str, object]] = {
    # @tod_discern_bot
    8222973157: {"default": "A", "allowed": {"A", "B", "HARD"}},
    # @discernment_test_bot
    8416181261: {"default": "B", "allowed": {"B", "HARD"}},
}
ALL_LEVELS: Tuple[str, ...] = ("A", "B", "HARD")

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def answers_kb(options: List[str]) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=opt, callback_data=f"ans:{i}")]
            for i, opt in enumerate(options)]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def level_picker_kb(allowed: Optional[set] = None) -> InlineKeyboardMarkup:
    allowed = allowed or set(ALL_LEVELS)
    rows = []
    if "A" in allowed:
        rows.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å A", callback_data="setlvl:A")])
    if "B" in allowed:
        rows.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å B", callback_data="setlvl:B")])
    if "HARD" in allowed:
        rows.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å HARD", callback_data="setlvl:HARD")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def restart_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="again")],
            [InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="levelpick")],
            [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share")],
        ]
    )

def share_kb(username: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(
            text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", url=f"https://t.me/{username}?start=share"
        )]]
    )

# ---------- safe utils ----------
async def safe_answer(cq: CallbackQuery, text: Optional[str] = None, *, cache_time: int = 0, show_alert: bool = False):
    try:
        await cq.answer(text=text, cache_time=cache_time, show_alert=show_alert)
    except TelegramBadRequest:
        # query is too old / invalid ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass

async def safe_edit_text(msg: Message, text: str, reply_markup=None, parse_mode="HTML") -> Message:
    try:
        return await msg.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except TelegramBadRequest as e:
        if "message is not modified" in (str(e) or "").lower():
            return msg
        raise
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after + 0.5)
        return await msg.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        log.warning("safe_edit_text failed: %s", e)
        return msg

# ---------- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----------
@dataclass
class UserState:
    level: str = "A"
    idx: int = 0
    score: int = 0
    total: int = 0
    misses: Dict[str, int] = None

    def reset(self, level: Optional[str] = None):
        if level:
            self.level = level
        self.idx = 0
        self.score = 0
        self.total = 0
        self.misses = {}

# –ö–ª—é—á: (bot_id, chat_id)
STATE: Dict[Tuple[int, int], UserState] = {}

# –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: (bot_id, user_id, message_id)
HANDLED: Set[Tuple[int, int, int]] = set()

def _key(bot_id: int, chat_id: int) -> Tuple[int, int]:
    return (bot_id, chat_id)

def get_tasks_by_level(level: str) -> List[dict]:
    if level == "A":
        return list(TASKS_A)
    if level == "B":
        return list(TASKS_B)
    if level == "HARD":
        return list(TASKS_HARD)
    return list(TASKS_A)

def render_intro(levels_line: str) -> str:
    return (
        "–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ?\n\n"
        "‚Ä¢ 10 –∑–∞–¥–∞–Ω–∏–π ¬∑ 2 –º–∏–Ω—É—Ç—ã\n"
        "‚Ä¢ –°—Ä–∞–∑—É —Ä–∞–∑–±–æ—Ä –∏ —Å–æ–≤–µ—Ç—ã\n\n"
        "–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ‚Äî –∫–Ω–æ–ø–∫–æ–π <b>¬´–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å¬ª</b> –∏–ª–∏ "
        f"–∫–æ–º–∞–Ω–¥–∞–º–∏: {levels_line}\n\n"
        "–ù–∞—á–∏–Ω–∞–µ–º! üß†"
    )

def render_question(task: dict, idx: int, total: int) -> str:
    return f"–ó–∞–¥–∞–Ω–∏–µ {idx}/{total}:\n{task['text']}"

def render_verdict(is_right: bool, task: dict) -> str:
    prefix = "‚úÖ –í–µ—Ä–Ω–æ!" if is_right else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ."
    ans = task.get("answer", "")
    explain = task.get("explain", "")
    if explain:
        return f"{prefix} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{ans}</b>.\n{explain}"
    else:
        return f"{prefix} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{ans}</b>."

def render_summary(state: UserState, level: str) -> str:
    lines = [f"–ì–æ—Ç–æ–≤–æ! –ò—Ç–æ–≥: <b>{state.score}/{state.total}</b>\n"]
    if state.misses:
        lines.append("<b>–ì–¥–µ —á–∞—â–µ –ø—Ä–æ–º–∞—Ö–∏:</b>")
        for k, v in state.misses.items():
            lines.append(f"‚Ä¢ {k} ‚Äî {v}√ó")
        lines.append("")
        lines.append("<b>–°–æ–≤–µ—Ç—ã:</b>")
        lines.append("‚Ä¢ –ó–∞–º–µ–¥–ª—è–π—Å—è –Ω–∞ –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç–∏ –∏ –≤—ã–±–æ—Ä–∫–∞—Ö.")
        lines.append("‚Ä¢ –ò—â–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.")
        lines.append("‚Ä¢ –ü—Ä–æ—Å–∏ –º–µ—Ç–æ–¥/–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –∞ –Ω–µ —Å—Ç–∞—Ç—É—Å/–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å.")
    else:
        lines.append("–•–æ—Ä–æ—à–µ–µ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ! –ò–Ω–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ª–æ–≤–∏—Ç—å—Å—è –Ω–∞ —Ç–æ–Ω–∫–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
    lines.append(f"\n–£—Ä–æ–≤–µ–Ω—å —Å–µ–π—á–∞—Å: <b>{level}</b>")
    return "\n".join(lines)

# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
async def start_quiz(msg: Message, bot_id: int, username: str):
    k = _key(bot_id, msg.chat.id)
    st = STATE.setdefault(k, UserState())

    policy = BOT_LEVEL_POLICY.get(bot_id, {"default": "A", "allowed": set(ALL_LEVELS)})
    if st.level not in policy.get("allowed", set(ALL_LEVELS)):
        st.level = policy.get("default", "A")

    tasks = get_tasks_by_level(st.level)
    st.idx = 0
    st.score = 0
    st.total = len(tasks)
    st.misses = {}

    levels_line = "<code>/level A</code>, <code>/level B</code>, <code>/level HARD</code>."
    await msg.answer(render_intro(levels_line), parse_mode="HTML")

    # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    st.idx = 1
    task = tasks[0]
    await msg.answer(
        render_question(task, st.idx, st.total),
        reply_markup=answers_kb(task["options"]),
        parse_mode="HTML",
    )

def _current_task(bot_id: int, chat_id: int) -> Tuple[UserState, dict, List[dict]]:
    k = _key(bot_id, chat_id)
    st = STATE.setdefault(k, UserState())
    tasks = get_tasks_by_level(st.level)
    cur = tasks[st.idx - 1]
    return st, cur, tasks

def _record_miss(st: UserState, label: str):
    if not label:
        return
    st.misses[label] = st.misses.get(label, 0) + 1

# /start
async def on_start(message: Message, bot: Bot):
    bot_id = (await bot.me()).id
    username = (await bot.me()).username
    k = _key(bot_id, message.chat.id)
    st = STATE.setdefault(k, UserState())
    st.reset(level=BOT_LEVEL_POLICY.get(bot_id, {}).get("default", "A"))
    await start_quiz(message, bot_id, username)

# –ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
async def on_level_command(msg: Message, bot: Bot):
    bot_id = (await bot.me()).id
    allowed = BOT_LEVEL_POLICY.get(bot_id, {}).get("allowed", set(ALL_LEVELS))
    await msg.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_picker_kb(set(allowed)))

# –°–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è (–∫–Ω–æ–ø–∫–∞)
async def on_set_level(cq: CallbackQuery, bot: Bot):
    await safe_answer(cq, cache_time=0)
    bot_id = (await bot.me()).id

    level = cq.data.split(":")[1]
    policy = BOT_LEVEL_POLICY.get(bot_id, {"allowed": set(ALL_LEVELS)})
    allowed = policy.get("allowed", set(ALL_LEVELS))
    if level not in allowed:
        await cq.message.answer("–≠—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.")
        return

    k = _key(bot_id, cq.message.chat.id)
    st = STATE.setdefault(k, UserState())
    st.reset(level=level)

    with contextlib.suppress(Exception):
        await cq.message.edit_reply_markup()

    await cq.message.answer(f"–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ <b>{level}</b>.", parse_mode="HTML")
    await start_quiz(cq.message, bot_id, (await bot.me()).username)

# –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç
async def on_answer(cq: CallbackQuery, bot: Bot):
    await safe_answer(cq, cache_time=0)
    bot_id = (await bot.me()).id
    key = (bot_id, cq.from_user.id, cq.message.message_id)

    # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ message_id: –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å ‚Äî –æ–¥–∏–Ω –∑–∞—á—ë—Ç
    if key in HANDLED:
        await safe_answer(cq, text="–û—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–∏–Ω—è—Ç ‚úÖ", cache_time=1)
        return
    HANDLED.add(key)

    k = _key(bot_id, cq.message.chat.id)
    st, task, tasks = _current_task(bot_id, cq.message.chat.id)

    # —Å–Ω–∏–º–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å—Ç–∞—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    with contextlib.suppress(Exception):
        await cq.message.edit_reply_markup()

    try:
        idx = int(cq.data.split(":")[1])
    except Exception:
        idx = -1

    chosen = task["options"][idx] if 0 <= idx < len(task["options"]) else ""
    is_right = _norm(chosen) == _norm(task["answer"])
    if is_right:
        st.score += 1
    else:
        _record_miss(st, _norm(task.get("answer", "")))

    await cq.message.answer(render_verdict(is_right, task), parse_mode="HTML")

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ñ–∏–Ω–∞–ª
    if st.idx < st.total:
        st.idx += 1
        next_task = tasks[st.idx - 1]
        await cq.message.answer(
            render_question(next_task, st.idx, st.total),
            reply_markup=answers_kb(next_task["options"]),
            parse_mode="HTML",
        )
    else:
        summary = render_summary(st, st.level)
        await cq.message.answer(summary, reply_markup=restart_kb(), parse_mode="HTML")

# –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑
async def on_again(cq: CallbackQuery, bot: Bot):
    await safe_answer(cq, cache_time=0)
    bot_id = (await bot.me()).id
    k = _key(bot_id, cq.message.chat.id)
    st = STATE.setdefault(k, UserState())
    st.reset(level=st.level)
    with contextlib.suppress(Exception):
        await cq.message.edit_reply_markup()
    await start_quiz(cq.message, bot_id, (await bot.me()).username)

# –°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å (–ø–æ–¥ –∏—Ç–æ–≥–æ–º)
async def on_level_pick(cq: CallbackQuery, bot: Bot):
    await safe_answer(cq, cache_time=0)
    bot_id = (await bot.me()).id
    allowed = BOT_LEVEL_POLICY.get(bot_id, {}).get("allowed", set(ALL_LEVELS))
    await cq.message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_picker_kb(set(allowed)))

# –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
async def on_share(cq: CallbackQuery, bot: Bot):
    await safe_answer(cq, cache_time=0)
    me = await bot.me()
    kb = share_kb(me.username or "discernment_test_bot")
    await cq.message.answer("–ö–∏–Ω—å –¥—Ä—É–≥—É ‚Äî –ø—É—Å—Ç—å —Ç–æ–∂–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ:", reply_markup=kb)

# ------- –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞ -------
async def run_single_bot(token: str):
    bot = Bot(token=token, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(on_start, CommandStart())
    dp.message.register(on_level_command, F.text.startswith("/level"))

    dp.callback_query.register(on_set_level, F.data.startswith("setlvl:"))
    dp.callback_query.register(on_answer, F.data.startswith("ans:"))
    dp.callback_query.register(on_again, F.data == "again")
    dp.callback_query.register(on_level_pick, F.data == "levelpick")
    dp.callback_query.register(on_share, F.data == "share")

        # --- DIAG: –ø–∏–Ω–≥ –∏ –ª–æ–≥ –≤—Å–µ–≥–æ ---
    async def ping(m: Message, bot: Bot):
        me = await bot.me()
        await m.answer(f"pong ‚úÖ (@{me.username})")

    async def ping(m: Message, bot: Bot):
    me = await bot.me()
    log.info("Ping received from %s", m.from_user.id)
    await m.answer(f"pong ‚úÖ (@{me.username})")

    async def log_any_message(m: Message):
        log.info("MSG from %s | chat=%s | text=%r",
                 m.from_user.id if m.from_user else None,
                 m.chat.id,
                 getattr(m, "text", None))

    async def log_any_callback(cq: CallbackQuery):
        log.info("CQ from %s | chat=%s | data=%r",
                 cq.from_user.id if cq.from_user else None,
                 cq.message.chat.id if cq.message else None,
                 cq.data)

    dp.message.register(ping, F.text == "/ping")
    dp.message.register(log_any_message)
    dp.callback_query.register(log_any_callback)
    
    with contextlib.suppress(Exception):
        me = await bot.me()
        log.info("Deleting webhook & dropping pending updates for @%s ...", me.username)
        await bot.delete_webhook(drop_pending_updates=True)

    # –°–Ω–æ—Å–∏–º –≤–µ–±—Ö—É–∫ –∏ ¬´—Ö–≤–æ—Å—Ç¬ª –∞–ø–¥–µ–π—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –ø—Ä–æ—Ç—É—Ö—à–∏–µ query
    with contextlib.suppress(Exception):
        await bot.delete_webhook(drop_pending_updates=True)

    me = await bot.me()
    log.info("Starting polling for bot @%s (id=%s)", me.username, me.id)
    await dp.start_polling(bot)

# ------- main -------
async def main():
    load_dotenv()
    tokens: List[str] = []
    for k, v in os.environ.items():
        if k.startswith("BOT_TOKEN") and v:
            tokens.append(v)
    if not tokens and os.environ.get("BOT_TOKEN"):
        tokens.append(os.environ["BOT_TOKEN"])
    if not tokens:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω BOT_TOKEN* –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    log.info("Starting polling for %d bot(s): %s", len(tokens), ["***" + t[-5:] for t in tokens])
    await asyncio.gather(*(run_single_bot(t) for t in tokens))

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("Stopped.")
