# bot/bot.py
# =========================================================
# Multi-bot (–¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BOT_TOKEN, BOT_TOKEN2) ‚Äî aiogram v3
# –£—Ä–æ–≤–Ω–∏ A / B / HARD, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π ¬´–ø–æ—Ä—Ç—Ä–µ—Ç¬ª, –∞–Ω—Ç–∏-–¥–∞–±–ª-–∫–ª–∏–∫, /level –∏ deep-link
# =========================================================

import os
import asyncio
import logging
from dataclasses import dataclass
from typing import List, Dict, Tuple, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from dotenv import load_dotenv

# ------------------------ –õ–û–ì–ò ------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
load_dotenv()

# ----------------- –ò–ú–ü–û–†–¢ –ü–£–õ–û–í –í–û–ü–†–û–°–û–í -----------------
# A (tasks.py): –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –∏–º–µ–Ω–∏ ‚Äî TASKS –∏ TASKS_A
try:
    from .tasks import TASKS as TASKS_A_RAW  # type: ignore
except Exception:
    from .tasks import TASKS_A as TASKS_A_RAW  # type: ignore

# B (tasks_b.py): –æ–±—ã—á–Ω–æ TASKS_B
try:
    from .tasks_b import TASKS_B as TASKS_B_RAW  # type: ignore
except Exception:
    from .tasks_b import TASKS as TASKS_B_RAW  # fallback –µ—Å–ª–∏ –Ω–∞–∑—ã–≤–∞–ª–∏ TASKS

# HARD (tasks_hard.py): –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º TASKS_HARD –∏ TASKS_H
try:
    from .tasks_hard import TASKS_HARD as TASKS_HARD_RAW  # type: ignore
except Exception:
    try:
        from .tasks_hard import TASKS as TASKS_HARD_RAW  # type: ignore
    except Exception:
        try:
            from .tasks_hard import TASKS_H as TASKS_HARD_RAW  # type: ignore
        except Exception:
            TASKS_HARD_RAW = []  # –Ω–µ—Ç —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ‚Äî –æ–∫, –ø—Ä–æ—Å—Ç–æ –±–µ–∑ HARD

# -------------------- –ú–û–î–ï–õ–ò/–ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø --------------------
@dataclass
class Task:
    id: str
    text: str
    options: List[str]
    answer: str
    xp: int = 0
    badge: Optional[str] = None
    explain: Optional[str] = None

def _norm(s: str) -> str:
    return (s or "").strip().casefold()

def _to_tasks(raw_list: List[dict]) -> List[Task]:
    out: List[Task] = []
    for r in raw_list or []:
        out.append(Task(
            id=str(r.get("id", "")),
            text=str(r.get("text", "")),
            options=list(r.get("options", [])),
            answer=str(r.get("answer", "")),
            xp=int(r.get("xp", 0) or 0),
            badge=r.get("badge"),
            explain=r.get("explain"),
        ))
    return out

TASKS_BY_LEVEL: Dict[str, List[Task]] = {
    "A": _to_tasks(TASKS_A_RAW),
    "B": _to_tasks(TASKS_B_RAW),
    "HARD": _to_tasks(TASKS_HARD_RAW),
}

ALL_LEVELS = ("A", "B", "HARD")

# -------------------- –ü–û–õ–ò–¢–ò–ö–ê –£–†–û–í–ù–ï–ô –ü–û bot.id --------------------
# –ó–∞–º–µ–Ω–∏ id –Ω–∞ —Å–≤–æ–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
BOT_LEVEL_POLICY: Dict[int, Dict[str, object]] = {
    8222973157: {"default": "A", "allowed": {"A", "B", "HARD"}},  # @tod_discern_bot
    8416181261: {"default": "B", "allowed": {"B", "HARD"}},       # @discernment_test_bot
}

# -------------------- –§–ò–ù–ê–õ–¨–ù–´–ô –ü–û–†–¢–†–ï–¢/–°–û–í–ï–¢–´ --------------------
ADVICE_MAP = {
    "–ø—Ä–∏—á–∏–Ω–∞": "–ó–∞–º–µ–¥–ª—è–π—Å—è –Ω–∞ –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç–∏: –∏—â–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≥—Ä—É–ø–ø.",
    "–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è": "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è ‚â† –ø—Ä–∏—á–∏–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å, –Ω–µ—Ç –ª–∏ –æ–±—â–µ–π —Ç—Ä–µ—Ç—å–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.",
    "post hoc": "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π –Ω–µ –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç—å.",
    "–∞–ø–µ–ª–ª—è—Ü–∏—è –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É": "–û—Ü–µ–Ω–∏ –º–µ—Ç–æ–¥/–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –∞ –Ω–µ —Å—Ç–∞—Ç—É—Å/–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å.",
    "–≤—ã–∂–∏–≤—à–∏–π –Ω–∞–±–æ—Ä": "–°–º–æ—Ç—Ä–∏ –Ω–∞ –Ω–µ–≤–∏–¥–∏–º—ã–µ –ø—Ä–æ–≤–∞–ª—ã: –ø—Ä–æ—Å–∏ –ø–æ–ª–Ω—É—é –≤—ã–±–æ—Ä–∫—É.",
    "–º–∞–ª—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏": "–ú–∞–ª–µ–Ω—å–∫–∏–µ –≤—ã–±–æ—Ä–∫–∏ —à—É–º–Ω—ã–µ ‚Äî –¥–æ–≤–µ—Ä—è–π —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è–º/–º–µ—Ç–∞–∞–Ω–∞–ª–∏–∑–∞–º.",
    "–∫–æ–º–ø–æ–∑–∏—Ü–∏—è": "–°–≤–æ–π—Å—Ç–≤–∞ —á–∞—Å—Ç–∏ –∏ —Ü–µ–ª–æ–≥–æ –Ω–µ –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã.",
    "–ª–æ–∂–Ω–∞—è –¥–∏–ª–µ–º–º–∞": "–ò—â–∏ —Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –±–∏–Ω–∞—Ä–Ω–æ—Å—Ç—å —á–∞—Å—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è.",
    "–∞–Ω–µ–∫–¥–æ—Ç": "–û–¥–∏–Ω —Å–ª—É—á–∞–π ‚Äî –Ω–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –ù—É–∂–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
    "–ø—Ä–∏–º–µ—Ä": "–û—Ç–¥–µ–ª—å–Ω—ã–µ –∫–µ–π—Å—ã ‚Äî –Ω–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –±–µ–∑ –±–∞–∑—ã.",
}

def build_portrait(mistakes: List[str], score: int, total: int, level: str) -> str:
    from collections import Counter
    cnt = Counter([m.strip().lower() for m in mistakes if m])
    if not cnt:
        headline = "–û—Ç–ª–∏—á–Ω–æ! –û—à–∏–±–æ–∫ –ø–æ—á—Ç–∏ –Ω–µ—Ç ‚Äî —É—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ üëè"
        tips = ["–ü–æ–¥–Ω–∏–º–∞–π –ø–ª–∞–Ω–∫—É ‚Äî –ø–æ–ø—Ä–æ–±—É–π —É—Ä–æ–≤–µ–Ω—å HARD.", "–¢—Ä–µ–Ω–∏—Ä—É–π—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö."]
    else:
        worst = [f"‚Ä¢ {k} ‚Äî {v}√ó" for k, v in cnt.most_common(3)]
        tips = []
        for k, _ in cnt.most_common(3):
            tips.append("‚Ä¢ " + ADVICE_MAP.get(k, f"–¢—Ä–µ–Ω–∏—Ä—É–π —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞: {k}."))
        headline = "**–ì–¥–µ —á–∞—â–µ –ø—Ä–æ–º–∞—Ö–∏:**\n" + "\n".join(worst)

    return (
        f"–ì–æ—Ç–æ–≤–æ! –ò—Ç–æ–≥: **{score}/{total}**\n\n"
        f"{headline}\n\n"
        f"**–°–æ–≤–µ—Ç—ã:**\n" + "\n".join(tips) +
        f"\n\n–£—Ä–æ–≤–µ–Ω—å —Å–µ–π—á–∞—Å: **{level}**"
    )

# -------------------- –ö–õ–ê–í–ò–ê–¢–£–†–´ --------------------
def answers_kb(options: List[str]) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=o, callback_data=f"ans:{i}")]
            for i, o in enumerate(options)]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def level_picker_kb(allowed: Optional[set] = None) -> InlineKeyboardMarkup:
    allowed = allowed or set(ALL_LEVELS)
    rows = []
    if "A" in allowed:
        rows.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å A", callback_data="set_level:A")])
    if "B" in allowed:
        rows.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å B", callback_data="set_level:B")])
    if "HARD" in allowed:
        rows.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å HARD", callback_data="set_level:HARD")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def finish_kb(bot_username: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="again")],
        [InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="pick_level")],
        [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"https://t.me/{bot_username}")],
    ])

# -------------------- –ê–ù–¢–ò-–î–ê–ë–õ-–ö–õ–ò–ö --------------------
# –ö–ª—é—á: (user_id, level) -> index –≤–æ–ø—Ä–æ—Å–∞
LAST_ANS: Dict[Tuple[int, str], int] = {}

# -------------------- –Ø–î–†–û: –ü–û–ö–ê–ó –í–û–ü–†–û–°–û–í --------------------
async def send_question(msg: Message, state: FSMContext):
    data = await state.get_data()
    level: str = data.get("level", "A")
    idx: int = data.get("i", 0)
    tasks: List[Task] = TASKS_BY_LEVEL.get(level, [])
    total = len(tasks)

    if total == 0:
        await msg.answer("–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π:", reply_markup=level_picker_kb())
        return

    if idx >= total:
        score = int(data.get("score", 0))
        mistakes: List[str] = data.get("mistakes", [])
        portrait = build_portrait(mistakes, score, total, level)
        me = await msg.bot.me()
        await msg.answer(portrait, reply_markup=finish_kb(me.username), parse_mode="Markdown")
        return

    task = tasks[idx]
    await msg.answer(
        f"–ó–∞–¥–∞–Ω–∏–µ {idx+1}/{total}:\n{task.text}",
        reply_markup=answers_kb(task.options)
    )

async def start_flow(msg: Message, state: FSMContext, default_level: str):
    data = await state.get_data()
    lvl = data.get("level", default_level)
    tasks = TASKS_BY_LEVEL.get(lvl, [])
    await state.update_data(level=lvl, i=0, score=0, mistakes=[], total=len(tasks))
    await msg.answer("–ù–∞—á–∏–Ω–∞–µ–º! üß†")
    await send_question(msg, state)

# -------------------- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–≠–ù–î–õ–ï–†–û–í --------------------
def register_handlers(dp: Dispatcher, default_level: str, allowed_levels: set):

    @dp.message(CommandStart())
    async def on_start(message: Message, state: FSMContext):
        # deep-link: /start level_A|level_B|level_HARD
        args = message.text.split(maxsplit=1)[1:] if message.text else []
        if args:
            p = args[0].strip().lower()
            if p in ("level_a", "level_b", "level_hard"):
                lvl = p.split("_")[1].upper()
                if lvl in allowed_levels:
                    await state.update_data(level=lvl)

        hello = (
            "–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ?\n\n"
            "‚Ä¢ 10 –∑–∞–¥–∞–Ω–∏–π ¬∑ 2 –º–∏–Ω—É—Ç—ã\n"
            "‚Ä¢ –°—Ä–∞–∑—É —Ä–∞–∑–±–æ—Ä –∏ —Å–æ–≤–µ—Ç—ã\n\n"
            "–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ‚Äî –∫–Ω–æ–ø–∫–æ–π **¬´–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å¬ª** –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏: "
            "`/level A`, `/level B`, `/level HARD`."
        )
        await message.answer(hello, parse_mode="Markdown")
        await start_flow(message, state, default_level)

    @dp.message(Command("level"))
    async def cmd_level(message: Message, state: FSMContext):
        parts = (message.text or "").split()
        if len(parts) == 2:
            new_level = parts[1].upper()
            if new_level in allowed_levels and new_level in TASKS_BY_LEVEL and TASKS_BY_LEVEL[new_level]:
                await state.update_data(level=new_level, i=0, score=0, mistakes=[], total=len(TASKS_BY_LEVEL[new_level]))
                await message.answer(f"–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ {new_level}.")
                await start_flow(message, state, default_level)
                return
        # –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
        await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_picker_kb(allowed_levels))

    @dp.callback_query(F.data == "pick_level")
    async def on_pick_level(cb: CallbackQuery):
        await cb.message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_picker_kb(allowed_levels))
        await cb.answer()

    @dp.callback_query(F.data.startswith("ans:"))
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = callback.data.split(":", 1)[1]

    # –ë–µ—Ä—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state = await state.get_data()
    current_index = user_state.get("current_index", 0)
    answered = user_state.get("answered", False)

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç ‚Üí –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä
    if answered:
        await callback.answer("–û—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–∏–Ω—è—Ç ‚úÖ", show_alert=False)
        return

    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç
    user_state["answered"] = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    task_list = user_state.get("task_list", [])
    if current_index < len(task_list):
        task = task_list[current_index]
        correct_answer = task["answer"].strip().lower()
        if data.strip().lower() == correct_answer:
            await callback.message.answer(f"‚úÖ –í–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}\n\n{task['explain']}")
        else:
            await callback.message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}\n\n{task['explain']}")

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        current_index += 1
        if current_index < len(task_list):
            user_state["current_index"] = current_index
            user_state["answered"] = False  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            await state.set_data(user_state)
            await send_task(callback.message, task_list[current_index], current_index)
        else:
            await callback.message.answer("–ì–æ—Ç–æ–≤–æ! –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ")
            await state.clear()
    else:
        await callback.message.answer("–¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ")
        await state.clear()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_data(user_state)
    await callback.answer()


    @dp.callback_query(F.data == "again")
    async def on_again(cb: CallbackQuery, state: FSMContext):
        await cb.answer()
        data = await state.get_data()
        lvl = data.get("level", default_level)
        await state.update_data(i=0, score=0, mistakes=[], total=len(TASKS_BY_LEVEL.get(lvl, [])))
        await start_flow(cb.message, state, default_level)

    @dp.callback_query(F.data.startswith("ans:"))
    async def on_answer(cb: CallbackQuery, state: FSMContext):
        await cb.answer()  # –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è UX
        data = await state.get_data()
        level: str = data.get("level", default_level)
        idx: int = data.get("i", 0)
        tasks: List[Task] = TASKS_BY_LEVEL.get(level, [])
        total = len(tasks)
        if idx >= total:
            return

        # –∞–Ω—Ç–∏-–¥–∞–±–ª-–∫–ª–∏–∫
        uid = cb.from_user.id
        if LAST_ANS.get((uid, level)) == idx:
            await cb.message.answer("–û—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–∏–Ω—è—Ç ‚úÖ")
            return
        LAST_ANS[(uid, level)] = idx

        task = tasks[idx]
        try:
            opt_index = int(cb.data.split(":", 1)[1])
        except Exception:
            opt_index = -1
        chosen = task.options[opt_index] if 0 <= opt_index < len(task.options) else ""

        correct = (_norm(chosen) == _norm(task.answer))
        if correct:
            txt = f"‚úÖ –í–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.answer}."
            if task.explain:
                txt += f"\n{task.explain}"
            await cb.message.answer(txt)
            await state.update_data(score=int(data.get("score", 0)) + 1)
        else:
            txt = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.answer}."
            if task.explain:
                txt += f"\n{task.explain}"
            await cb.message.answer(txt)
            # –∫–æ–ø–∏–º ¬´—Ç–∏–ø¬ª –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π answer –∫–∞–∫ —è—Ä–ª—ã–∫)
            mistakes = list(data.get("mistakes", []))
            mistakes.append(_norm(task.answer))
            await state.update_data(mistakes=mistakes)

        await state.update_data(i=idx + 1, total=total)
        await send_question(cb.message, state)

# -------------------- –ó–ê–ü–£–°–ö –ù–ï–°–ö–û–õ–¨–ö–ò–• –ë–û–¢–û–í --------------------
async def run_single_bot(token: str):
    bot = Bot(token=token)  # –±–µ–∑ parse_mode ‚Äî —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å aiogram 3.7+
    dp = Dispatcher(storage=MemoryStorage())

    me = await bot.me()
    bot_id = me.id
    policy = BOT_LEVEL_POLICY.get(bot_id, {"default": "A", "allowed": set(ALL_LEVELS)})
    default_level = str(policy.get("default", "A"))
    allowed_levels = set(policy.get("allowed", set(ALL_LEVELS)))

    register_handlers(dp, default_level, allowed_levels)

    logging.info(f"Start polling for bot @{me.username} id={me.id}")
    await dp.start_polling(bot)

async def main():
    tokens: List[str] = []
    for key in ("BOT_TOKEN", "BOT_TOKEN2"):
        t = (os.getenv(key) or "").strip()
        if t:
            tokens.append(t)
    if not tokens:
        raise RuntimeError("–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤. –î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN (–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ BOT_TOKEN2).")

    await asyncio.gather(*(run_single_bot(t) for t in tokens))

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Stopped.")
