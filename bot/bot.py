# bot/bot.py
# ============== Multi-bot quiz (aiogram v3) ==============
import os
import asyncio
import logging
from dataclasses import dataclass
from typing import List, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import CommandStart

# ---------- logging ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)

# ---------- quiz data ----------
@dataclass
class Task:
    id: str
    text: str
    options: List[str]
    answer: str  # —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞

# –í—Å—Ç–∞–≤–ª—è–π/–º–µ–Ω—è–π –∑–∞–¥–∞—á–∏ –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
TASKS: List[Task] = [
    Task(id="A1", text="–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –∑–æ–Ω—Ç—ã ‚Üî –¥–æ–∂–¥—å. –ß—Ç–æ —ç—Ç–æ?", options=["–ü—Ä–∏—á–∏–Ω–∞", "–°–ª–µ–¥—Å—Ç–≤–∏–µ", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è"], answer="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è"),
    Task(id="A2", text="¬´–≠–∫—Å–ø–µ—Ä—Ç –ø–æ–ø—É–ª—è—Ä–µ–Ω ‚Äî –∑–Ω–∞—á–∏—Ç –ø—Ä–∞–≤¬ª. –ß—Ç–æ —ç—Ç–æ?", options=["–ê–ø–µ–ª–ª—è—Ü–∏—è –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É", "–§–∞–∫—Ç", "–ê—Ä–≥—É–º–µ–Ω—Ç"], answer="–ê–ø–µ–ª–ª—è—Ü–∏—è –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É"),
    Task(id="A3", text="¬´–ß–µ–º –±–æ–ª—å—à–µ –∫–æ—Ñ–µ, —Ç–µ–º –º–µ–Ω—å—à–µ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å¬ª. –≠—Ç–æ‚Ä¶", options=["–ü—Ä–∏—á–∏–Ω–∞", "–§–∞–∫—Ç", "–ù–∞–±–ª—é–¥–µ–Ω–∏–µ"], answer="–ù–∞–±–ª—é–¥–µ–Ω–∏–µ"),
    Task(id="A4", text="¬´–ü–æ—Å–ª–µ X —Å–ª—É—á–∏–ª–æ—Å—å Y, –∑–Ω–∞—á–∏—Ç X –≤—ã–∑–≤–∞–ª Y¬ª. –ß—Ç–æ —ç—Ç–æ?", options=["–ü–æ—Å—Ç hoc", "–§–∞–∫—Ç", "–ì–∏–ø–æ—Ç–µ–∑–∞"], answer="–ü–æ—Å—Ç hoc"),
    Task(id="A5", text="¬´–î–æ–∫–∞–∑–∞–Ω–æ –ì–∞—Ä–≤–∞—Ä–¥–æ–º¬ª –±–µ–∑ —Å—Å—ã–ª–∫–∏. –ß—Ç–æ —ç—Ç–æ?", options=["–ê–ø–µ–ª–ª—è—Ü–∏—è –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É", "–§–∞–∫—Ç", "–†–µ–∫–ª–∞–º–∞"], answer="–ê–ø–µ–ª–ª—è—Ü–∏—è –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É"),
    Task(id="A6", text="¬´–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è ‚â† –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç—å¬ª ‚Äî —ç—Ç–æ‚Ä¶", options=["–ü—Ä–∞–≤–∏–ª–æ", "–ì–∏–ø–æ—Ç–µ–∑–∞", "–°–ª–µ–¥—Å—Ç–≤–∏–µ"], answer="–ü—Ä–∞–≤–∏–ª–æ"),
    Task(id="A7", text="¬´–ï—Å–ª–∏ –±—ã A, —Ç–æ B. B ‚Äî —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ A¬ª. –û—à–∏–±–∫–∞?", options=["–û–±—Ä–∞—Ç–Ω–∞—è –∏–º–ø–ª–∏–∫–∞—Ü–∏—è", "–°–ª–µ–¥—Å—Ç–≤–∏–µ", "–§–∞–∫—Ç"], answer="–û–±—Ä–∞—Ç–Ω–∞—è –∏–º–ø–ª–∏–∫–∞—Ü–∏—è"),
    Task(id="A8", text="¬´–ß–∏—Ç–∞—é—â–∏–µ —á–∞—â–µ –≤ –æ—á–∫–∞—Ö. –û—á–∫–∏ –ø–æ–≤—ã—à–∞—é—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç¬ª. –ß—Ç–æ —ç—Ç–æ?", options=["–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", "–ê—Ä–≥—É–º–µ–Ω—Ç", "–ü—Ä–∏—á–∏–Ω–∞"], answer="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è"),
    Task(id="A9", text="¬´–ú—ã –Ω–∞—à–ª–∏ —Å–≤—è–∑—å, –∑–Ω–∞—á–∏—Ç –Ω–∞—à–ª–∏ –ø—Ä–∏—á–∏–Ω—É¬ª. –≠—Ç–æ‚Ä¶", options=["–ü–æ–¥–º–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç–∏", "–§–∞–∫—Ç", "–ù–∞–±–ª—é–¥–µ–Ω–∏–µ"], answer="–ü–æ–¥–º–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç–∏"),
    Task(id="A10", text="¬´–í—Å–µ —Ç–∞–∫ –¥—É–º–∞—é—Ç¬ª. –ß—Ç–æ —ç—Ç–æ?", options=["–ê—Ä–≥—É–º–µ–Ω—Ç –∫ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É", "–§–∞–∫—Ç", "–°–ª–µ–¥—Å—Ç–≤–∏–µ"], answer="–ê—Ä–≥—É–º–µ–Ω—Ç –∫ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É"),
]

# ---------- helpers ----------
def build_options_kb(task: Task) -> InlineKeyboardMarkup:
    rows = []
    row = []
    for idx, opt in enumerate(task.options):
        row.append(InlineKeyboardButton(
            text=f"{idx+1}) {opt}",
            callback_data=f"ans:{task.id}:{idx}"
        ))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(inline_keyboard=rows)

def normalize(s: str) -> str:
    return (s or "").strip().casefold()

# ---------- per-bot runtime ----------
async def run_single_bot(token: str) -> None:
    bot = Bot(
        token=token,
        default=DefaultBotProperties(parse_mode="HTML")
    )
    dp = Dispatcher(storage=MemoryStorage())  # –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞

    # --- state keys –≤–Ω—É—Ç—Ä–∏ FSMContext: idx, score ---
    @dp.message(CommandStart())
    async def cmd_start(m: Message, state: FSMContext):
        await state.clear()
        text = (
            "–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏ ‚úÖ\n\n"
            "–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ?"
        )
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç", callback_data="quiz:start")]
            ]
        )
        # —Ç–æ–ª—å–∫–æ inline-–∫–Ω–æ–ø–∫–∏ ‚Äî —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –≤—Å–ø–ª—ã–≤–∞–µ—Ç
        await m.answer(text, reply_markup=kb)

    @dp.callback_query(F.data == "quiz:start")
    async def start_quiz(cb: CallbackQuery, state: FSMContext):
        await state.update_data(idx=0, score=0)
        task = TASKS[0]
        await cb.message.edit_text(
            f"–ó–∞–¥–∞–Ω–∏–µ 1/ {len(TASKS)}:\n<b>{task.text}</b>",
            reply_markup=build_options_kb(task)
        )
        await cb.answer()

    @dp.callback_query(F.data.startswith("ans:"))
    async def on_answer(cb: CallbackQuery, state: FSMContext):
        try:
            _, task_id, opt_idx_str = cb.data.split(":")
            opt_idx = int(opt_idx_str)
        except Exception:
            await cb.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –æ—Ç–≤–µ—Ç–æ–º‚Ä¶", show_alert=True)
            return

        data = await state.get_data()
        idx = int(data.get("idx", 0))
        score = int(data.get("score", 0))
        task: Task = TASKS[idx]

        chosen = task.options[opt_idx]
        correct = normalize(chosen) == normalize(task.answer)
        if correct:
            score += 1

        # –æ—Ç–∑—ã–≤ –∫ —Ç–µ–∫—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        verdict = "‚úÖ –í–µ—Ä–Ω–æ!" if correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ."
        await cb.answer(verdict, show_alert=False)

        # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Ç–æ–≥
        idx += 1
        if idx >= len(TASKS):
            # —Ñ–∏–Ω–∞–ª
            await state.clear()
            total = len(TASKS)
            msg = (
                f"–ì–æ—Ç–æ–≤–æ! –ò—Ç–æ–≥: <b>{score}/{total}</b>\n\n"
                "–ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–≤–∞—Ç—å –¥—Ä—É–≥–∞ üòâ"
            )
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="quiz:start")]
                ]
            )
            await cb.message.edit_text(msg, reply_markup=kb)
            return

        await state.update_data(idx=idx, score=score)
        task_next = TASKS[idx]
        await cb.message.edit_text(
            f"–ó–∞–¥–∞–Ω–∏–µ {idx+1}/ {len(TASKS)}:\n<b>{task_next.text}</b>",
            reply_markup=build_options_kb(task_next)
        )

    # ¬´–º—è–≥–∫–∏–π¬ª —Ä–æ—É—Ç: –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–º
    @dp.message(F.text.regexp(r"^/quiz$|^—Ç–µ—Å—Ç$|^–ø–æ–µ—Ö–∞—Ç—å|^–Ω–∞—á–∞—Ç—å").as_("m"))
    async def soft_start(m: Message, state: FSMContext):
        await start_quiz(
            CallbackQuery(id="0", from_user=m.from_user, chat_instance="0",
                          message=m, data="quiz:start"),
            state
        )

    # —Å—Ç–∞—Ä—Ç –ø–æ–ª–ª–∏–Ω–≥–∞
    # Note: allowed_updates ‚Äî –ø–æ —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º —Ç–∏–ø–∞–º
    used = dp.resolve_used_update_types()
    me = await bot.get_me()
    logging.info(f"Starting polling for @{me.username} (id={me.id})")
    await dp.start_polling(bot, allowed_updates=used)

# ---------- main: collect tokens & run ----------
def load_tokens_from_env() -> List[str]:
    # –ë–µ—Ä—ë–º BOT_TOKEN, BOT_TOKEN2, BOT_TOKEN3 ... (–≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ)
    tokens: List[str] = []
    # —è–≤–Ω—ã–µ –∏–º–µ–Ω–∞
    for key in sorted(os.environ.keys()):
        if key == "BOT_TOKEN" or key.startswith("BOT_TOKEN"):
            val = (os.getenv(key) or "").strip()
            if val:
                tokens.append(val)
    # —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ
    tokens = [t for i, t in enumerate(tokens) if t and t not in tokens[:i]]
    return tokens

async def main():
    tokens = load_tokens_from_env()
    if not tokens:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω –≤ ENV (BOT_TOKEN / BOT_TOKEN2 / ...)")
    masked = [f"{t[:6]}‚Ä¶{t[-4:]}" for t in tokens]
    logging.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤: {len(tokens)} —à—Ç -> {masked}")

    await asyncio.gather(*(run_single_bot(t) for t in tokens))

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
