# bot/bot.py
# ========= Multi-bot + 3 pools (basic/advanced/hard) ‚Äî aiogram v3 =========

import os
import asyncio
import logging
from dataclasses import dataclass
from typing import List, Dict, Tuple, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove,
)
# –í–ê–ñ–ù–û: DefaultBotProperties –∂–∏–≤—ë—Ç –∑–¥–µ—Å—å
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# ---- –∏–º–ø–æ—Ä—Ç—ã –ø—É–ª–æ–≤ –∑–∞–¥–∞—á (—É—Å—Ç–æ–π—á–∏–≤—ã–µ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–ø–æ—Å–æ–±–∞–º –∑–∞–ø—É—Å–∫–∞) ----
try:
    from bot.tasks import TASKS as TASKS_A
    from bot.tasks_b import TASKS as TASKS_B
    from bot.tasks_hard import TASKS as TASKS_HARD
except Exception:
    from tasks import TASKS as TASKS_A
    from tasks_b import TASKS as TASKS_B
    from tasks_hard import TASKS as TASKS_HARD

# ==================== –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ====================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)
load_dotenv()

# —á–∏—Ç–∞–µ–º –¥–æ –¥–≤—É—Ö —Ç–æ–∫–µ–Ω–æ–≤
TOKENS: List[str] = []
for name in ("BOT_TOKEN", "BOT_TOKEN2"):
    t = os.getenv(name, "").strip()
    if t:
        TOKENS.append(t)

if not TOKENS:
    raise RuntimeError("–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤: –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏/–∏–ª–∏ BOT_TOKEN2")

# –æ–±—â–µ–µ in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
storage = MemoryStorage()

__BOT_VERSION__ = "kb-1.7.1-three-pools"

# ==================== –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö ====================
@dataclass
class Task:
    id: str
    text: str
    options: List[str]
    answer: str
    xp: int = 10
    badge: Optional[str] = None
    explain: Optional[str] = None

# ==================== —É—Ç–∏–ª–∏—Ç—ã ====================
def pool_by_level(level: str) -> List[Task]:
    lvl = level.upper()
    if lvl in ("H", "HARD"):
        return [Task(**t) for t in TASKS_HARD]
    if lvl in ("B", "ADV", "ADVANCED"):
        return [Task(**t) for t in TASKS_B]
    return [Task(**t) for t in TASKS_A]  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî basic

def normalize(s: str) -> str:
    return (s or "").strip().lower()

def build_inline_kb(options: List[str], block: str) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    for idx, opt in enumerate(options):
        rows.append(
            [InlineKeyboardButton(text=opt, callback_data=f"ans:{block}:{idx}")]
        )
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ==================== –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ====================
async def cmd_start(m: Message, state: FSMContext):
    await state.clear()
    try:
        await m.answer("\u2060", reply_markup=ReplyKeyboardRemove())
    except Exception:
        pass

    await state.update_data(level="A", idx=0, score=0)
    await m.answer(
        "–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ?\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: <b>A</b> (–±–∞–∑–æ–≤—ã–π), <b>B</b> (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π), <b>HARD</b> (—Ö–∞—Ä–¥).\n"
        "–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å: <code>/level A</code> | <code>/level B</code> | <code>/level HARD</code>",
    )
    await send_task(m, state)

async def cmd_level(m: Message, state: FSMContext):
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å: /level A | /level B | /level HARD")
        return
    level = parts[1].strip().upper()
    if level not in ("A", "B", "HARD", "H"):
        await m.answer("–ù–µ –ø–æ–Ω—è–ª —É—Ä–æ–≤–µ–Ω—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: A, B –∏–ª–∏ HARD.")
        return

    await state.update_data(level=level if level != "H" else "HARD", idx=0, score=0)
    await m.answer(f"–£—Ä–æ–≤–µ–Ω—å —Å–º–µ–Ω—ë–Ω –Ω–∞ <b>{level}</b>.")
    await send_task(m, state)

async def send_task(m: Message, state: FSMContext):
    data = await state.get_data()
    level = data.get("level", "A")
    idx = int(data.get("idx", 0))

    tasks = pool_by_level(level)
    if idx >= len(tasks):
        score = int(data.get("score", 0))
        await m.answer(
            f"–ì–æ—Ç–æ–≤–æ! –ò—Ç–æ–≥: <b>{score}/{len(tasks)}</b>\n\n"
            "–ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–≤–∞—Ç—å –¥—Ä—É–≥–∞ üòâ",
        )
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="restart")]
            ]
        )
        await m.answer(" ", reply_markup=kb)
        return

    task = tasks[idx]
    kb = build_inline_kb(task.options, block=task.id)
    await state.update_data(current_id=task.id, tasks_len=len(tasks))
    await m.answer(f"–ó–∞–¥–∞–Ω–∏–µ {idx+1}/{len(tasks)}:\n<b>{task.text}</b>", reply_markup=kb)

# ==================== –∫–æ–ª–±—ç–∫–∏ ====================
async def on_answer(cq: CallbackQuery, state: FSMContext):
    parts = cq.data.split(":")
    if len(parts) != 3:
        await cq.answer()
        return
    _, block, opt_idx_s = parts
    try:
        choice_idx = int(opt_idx_s)
    except ValueError:
        await cq.answer()
        return

    data = await state.get_data()
    level = data.get("level", "A")
    idx = int(data.get("idx", 0))
    tasks = pool_by_level(level)
    if idx >= len(tasks):
        await cq.answer()
        return

    task = tasks[idx]
    if task.id != block:
        await cq.answer()
        return

    chosen = task.options[choice_idx] if 0 <= choice_idx < len(task.options) else ""
    is_correct = normalize(chosen) == normalize(task.answer)

    if is_correct:
        await state.update_data(score=int(data.get("score", 0)) + 1)
        prefix = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        prefix = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ."

    explain = f"\n\n{task.explain}" if task.explain else ""
    await cq.message.answer(f"{prefix} –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{task.answer}</b>.{explain}")

    await state.update_data(idx=idx + 1)
    await send_task(cq.message, state)
    await cq.answer()

async def on_restart(cq: CallbackQuery, state: FSMContext):
    await state.update_data(idx=0, score=0)
    await cq.message.answer("–ü–æ–µ—Ö–∞–ª–∏ –µ—â—ë —Ä–∞–∑!")
    await send_task(cq.message, state)
    await cq.answer()

# ==================== –∑–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ—Ç–æ–≤ ====================
async def run_single_bot(token: str):
    bot = Bot(token=token, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=storage)

    dp.message.register(cmd_start, CommandStart())
    dp.message.register(cmd_level, F.text.startswith("/level"))
    dp.callback_query.register(on_restart, F.data == "restart")
    dp.callback_query.register(on_answer, F.data.startswith("ans:"))

    me = await bot.get_me()
    logging.info(f"Starting polling for @{me.username} (id={me.id})")
    await dp.start_polling(bot)

async def main():
    logging.info(f"Run polling for {len(TOKENS)} bot(s) ‚Äî version {__BOT_VERSION__}")
    await asyncio.gather(*(run_single_bot(t) for t in TOKENS))

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
