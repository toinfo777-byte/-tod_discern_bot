# bot/bot.py
# ===============================
# Multi-bot (aiogram v3) + inline-only UI (no system keyboard popup)
# ===============================

import os
import asyncio
import logging
from dataclasses import dataclass
from typing import List, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import CommandStart
from dotenv import load_dotenv

# ---------------- setup ----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)
load_dotenv()

# —Ç–æ–∫–µ–Ω—ã (1 –∏–ª–∏ 2). –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω ‚Äî –Ω–∏–∂–µ –∏–º —Å–≤—è–∂–µ–º –Ω–∞–±–æ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
TOKENS: List[str] = []
for key in ("BOT_TOKEN", "BOT_TOKEN2"):
    t = os.getenv(key, "").strip()
    if t:
        TOKENS.append(t)

if not TOKENS:
    raise RuntimeError("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞. –ó–∞–¥–∞–π—Ç–µ BOT_TOKEN (–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ BOT_TOKEN2).")

# –û–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
storage = MemoryStorage()

# –í–µ—Ä—Å–∏—è —Å–±–æ—Ä–∫–∏ (–¥–ª—è –ª–æ–≥–æ–≤)
__BOT_VERSION__ = "kb-1.7-final"

# ---------------- –¥–∞–Ω–Ω—ã–µ ----------------
# –ù–∞–±–æ—Ä—ã –∑–∞–¥–∞—á –ª–µ–∂–∞—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
from .tasks import TASKS_A
from .tasks_b import TASKS_B

@dataclass
class Task:
    id: str
    text: str
    options: List[str]
    answer: str
    xp: int
    badge: Optional[str] = None
    explain: Optional[str] = None

# –ü—Ä–∏–≤—è–∑–∫–∞: –∫–∞–∫–æ–π –±–æ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –∫–∞–∫–æ–π –Ω–∞–±–æ—Ä –∑–∞–¥–∞—á.
# 1-–π —Ç–æ–∫–µ–Ω ‚Üí –Ω–∞–±–æ—Ä –ê, 2-–π —Ç–æ–∫–µ–Ω ‚Üí –Ω–∞–±–æ—Ä B.
TASK_MAP: List[List[dict]] = [TASKS_A, TASKS_B]

# ---------------- —É—Ç–∏–ª–∏—Ç—ã ----------------
def build_inline(options: List[str]) -> InlineKeyboardMarkup:
    # –¢–æ–ª—å–∫–æ inline-–∫–Ω–æ–ø–∫–∏ ‚Äî —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    rows = [[InlineKeyboardButton(text=opt, callback_data=f"opt:{i}")]
            for i, opt in enumerate(options)]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def build_cta() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç", callback_data="cta:start")],
    ])

def build_again() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="cta:again")],
    ])

def normalize(s: str) -> str:
    return " ".join(s.split()).strip().casefold()

# ---------------- —è–¥—Ä–æ –±–æ—Ç–∞ ----------------
async def run_single_bot(token: str, tasks_pack: List[dict]) -> None:
    bot = Bot(token=token, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=storage)

    # –õ–æ–∫–∞–ª—å–Ω—ã–µ ¬´–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã¬ª –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞
    TASKS: List[Task] = [Task(**t) for t in tasks_pack]
    TOTAL = len(TASKS)

    @dp.message(CommandStart())
    async def on_start(m: Message, state: FSMContext):
        await state.clear()
        await state.update_data(idx=0, correct=0, streak=0)
        await m.answer("–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏ ‚úÖ")
        await m.answer("–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ?", reply_markup=build_cta())

    @dp.callback_query(F.data == "cta:start")
    async def start_quiz(cb: CallbackQuery, state: FSMContext):
        await cb.answer()
        await send_task(cb.message, state)

    @dp.callback_query(F.data == "cta:again")
    async def again(cb: CallbackQuery, state: FSMContext):
        await cb.answer()
        await state.clear()
        await state.update_data(idx=0, correct=0, streak=0)
        await send_task(cb.message, state)

    async def send_task(m: Message, state: FSMContext):
        data = await state.get_data()
        i = int(data.get("idx", 0))
        if i >= TOTAL:
            # –ö–æ–Ω–µ—Ü
            correct = int(data.get("correct", 0))
            await m.answer(
                f"–ì–æ—Ç–æ–≤–æ! –ò—Ç–æ–≥: <b>{correct}/{TOTAL}</b>\n\n"
                "–ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–≤–∞—Ç—å –¥—Ä—É–≥–∞ üòâ",
                reply_markup=build_again()
            )
            return

        task = TASKS[i]
        kb = build_inline(task.options)
        await m.answer(f"–ó–∞–¥–∞–Ω–∏–µ {i+1}/{TOTAL}:\n{task.text}", reply_markup=kb)

    @dp.callback_query(F.data.startswith("opt:"))
    async def answer_option(cb: CallbackQuery, state: FSMContext):
        await cb.answer()
        data = await state.get_data()
        i = int(data.get("idx", 0))
        if i >= TOTAL:
            await cb.message.answer("–¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑¬ª.", reply_markup=build_again())
            return

        task = TASKS[i]
        try:
            choice_index = int(cb.data.split(":")[1])
        except Exception:
            return

        chosen = task.options[choice_index] if 0 <= choice_index < len(task.options) else ""
        is_correct = normalize(chosen) == normalize(task.answer)

        # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        correct = int(data.get("correct", 0)) + (1 if is_correct else 0)
        await state.update_data(correct=correct)

        if is_correct:
            msg = f"‚úÖ –í–µ—Ä–Ω–æ! {task.explain or ''}".strip()
        else:
            msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{task.answer}</b>.\n{task.explain or ''}".strip()

        await cb.message.answer(msg)

        # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await state.update_data(idx=i+1)
        await send_task(cb.message, state)

    # –°—Ç–∞—Ä—Ç –ø–æ–ª–ª–∏–Ω–≥–∞
    me = await bot.get_me()
    logging.info(f"Starting polling for @{me.username} (id={me.id})")
    await dp.start_polling(bot)

# ---------------- entrypoint ----------------
async def main():
    # –ü–æ–¥ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥–ª–æ–∂–∏–º –Ω–∞–±–æ—Ä –∑–∞–¥–∞—á (–ê/B)
    tasks_for_bot = []
    for i, tok in enumerate(TOKENS):
        pack = TASK_MAP[i] if i < len(TASK_MAP) else TASKS_A
        tasks_for_bot.append((tok, pack))

    logging.info(f"Start polling for {len(tasks_for_bot)} bot(s): {[t[0][-10:] for t in tasks_for_bot]}")
    await asyncio.gather(*(run_single_bot(t, pack) for t, pack in tasks_for_bot))

if __name__ == "__main__":
    asyncio.run(main())
