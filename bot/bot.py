# bot/bot.py
# =========================================================
# Multi-bot (2 —Ç–æ–∫–µ–Ω–∞) + —É—Ä–æ–≤–Ω–∏ A / B / HARD ‚Äî aiogram v3
# –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç, —Å–æ–≤–µ—Ç—ã, –∞–Ω—Ç–∏-–¥–∞–±–ª-–∫–ª–∏–∫, /level –∏ deep-link
# =========================================================

import os
import asyncio
import logging
from dataclasses import dataclass
from typing import List, Dict, Tuple, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from dotenv import load_dotenv

# ---------- –∏–º–ø–æ—Ä—Ç –ø—É–ª–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ ----------
# tasks.py ‚Äî –±–∞–∑–æ–≤—ã–π (A), tasks_b.py ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (B), tasks_hard.py ‚Äî —Ö–∞—Ä–¥ (HARD)
from .tasks import TASKS as TASKS_A
from .tasks_b import TASKS_B
try:
    # —Ñ–∞–π–ª –º–æ–∂–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É ‚Äî –ø—Ä–æ–±—É–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    from .tasks_hard import TASKS_HARD
except ImportError:
    # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–∑–≤–∞–Ω–∞ –∏–Ω–∞—á–µ
    from .tasks_hard import TASKS_H as TASKS_HARD  # type: ignore


# ---------- –∫–æ–Ω—Ñ–∏–≥ ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)
load_dotenv()

TOKENS: List[str] = []
for key in ("BOT_TOKEN", "BOT_TOKEN2"):
    t = os.getenv(key, "").strip()
    if t:
        TOKENS.append(t)

if not TOKENS:
    raise RuntimeError("–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤: –¥–æ–±–∞–≤—å—Ç–µ env BOT_TOKEN (–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ BOT_TOKEN2)")

# –ø–æ–ª–∏—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ bot.id (–º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å id –Ω–∞ —Å–≤–æ–∏)
# @tod_discern_bot -> 8222973157
# @discernment_test_bot -> 8416181261
BOT_LEVEL_POLICY: Dict[int, Dict[str, object]] = {
    8222973157: {"default": "A", "allowed": {"A", "B", "HARD"}},
    8416181261: {"default": "B", "allowed": {"B", "HARD"}},
}
ALL_LEVELS = ("A", "B", "HARD")

# ---------- —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç/—Å–æ–≤–µ—Ç—ã ----------
ADVICE_MAP = {
    "–ø—Ä–∏—á–∏–Ω–∞": "–ó–∞–º–µ–¥–ª—è–π—Å—è –Ω–∞ –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç–∏: –∏—â–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≥—Ä—É–ø–ø.",
    "–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è": "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è ‚â† –ø—Ä–∏—á–∏–Ω–∞. –ü—Ä–æ–≤–µ—Ä—è–π, –Ω–µ—Ç –ª–∏ –æ–±—â–µ–π —Ç—Ä–µ—Ç—å–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.",
    "post hoc": "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π –Ω–µ –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç—å.",
    "–∞–ø–µ–ª–ª—è—Ü–∏—è –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É": "–û—Ü–µ–Ω–∏ –º–µ—Ç–æ–¥/–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –∞ –Ω–µ —Å—Ç–∞—Ç—É—Å/–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å.",
    "–≤—ã–∂–∏–≤—à–∏–π –Ω–∞–±–æ—Ä": "–°–º–æ—Ç—Ä–∏ –Ω–∞ –Ω–µ–≤–∏–¥–∏–º—ã–µ –ø—Ä–æ–≤–∞–ª—ã: –ø—Ä–æ—Å–∏ –ø–æ–ª–Ω—É—é –≤—ã–±–æ—Ä–∫—É.",
    "–º–∞–ª—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏": "–ú–∞–ª–µ–Ω—å–∫–∏–µ –≤—ã–±–æ—Ä–∫–∏ —à—É–º–Ω—ã–µ ‚Äî –¥–æ–≤–µ—Ä—è–π —Ç–æ–ª—å–∫–æ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è–º/–º–µ—Ç–∞–∞–Ω–∞–ª–∏–∑—É.",
    "–∫–æ–º–ø–æ–∑–∏—Ü–∏—è": "–°–≤–æ–π—Å—Ç–≤–∞ —á–∞—Å—Ç–∏ –∏ —Ü–µ–ª–æ–≥–æ –Ω–µ –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã.",
    "–ª–æ–∂–Ω–∞—è –¥–∏–ª–µ–º–º–∞": "–ò—â–∏ —Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: –±–∏–Ω–∞—Ä–Ω–æ—Å—Ç—å —á–∞—Å—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è.",
    "–∞–Ω–µ–∫–¥–æ—Ç": "–û—Ç–¥–µ–ª—å–Ω—ã–µ –∫–µ–π—Å—ã ‚Äî –Ω–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –±–µ–∑ –±–∞–∑—ã.",
    "–ø—Ä–∏–º–µ—Ä": "–û—Ç–¥–µ–ª—å–Ω—ã–µ –∫–µ–π—Å—ã ‚Äî –Ω–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –±–µ–∑ –±–∞–∑—ã.",
}

def build_portrait(mistakes: List[str], score: int, total: int, level: str) -> str:
    from collections import Counter
    cnt = Counter(mistakes)
    if not cnt:
        headline = "–û—Ç–ª–∏—á–Ω–æ! –û—à–∏–±–æ–∫ –Ω–µ—Ç ‚Äî —É—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ üëè"
        tips = ["–ü–æ–¥–Ω–∏–º–∞–π –ø–ª–∞–Ω–∫—É ‚Äî –ø–æ–ø—Ä–æ–±—É–π —É—Ä–æ–≤–µ–Ω—å HARD.", "–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö."]
    else:
        worst = [f"‚Ä¢ {k} ‚Äî {v}√ó" for k, v in cnt.most_common(3)]
        tips = []
        for k, _ in cnt.most_common(3):
            key = k.lower().strip()
            tips.append("‚Ä¢ " + ADVICE_MAP.get(key, f"–¢—Ä–µ–Ω–∏—Ä—É–π —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞: {k}."))
        headline = "**–ì–¥–µ —á–∞—â–µ –ø—Ä–æ–º–∞—Ö–∏:**\n" + "\n".join(worst)

    return (
        f"–ì–æ—Ç–æ–≤–æ! –ò—Ç–æ–≥: **{score}/{total}**\n\n"
        f"{headline}\n\n"
        f"**–°–æ–≤–µ—Ç—ã:**\n" + "\n".join(tips) +
        f"\n\n–£—Ä–æ–≤–µ–Ω—å —Å–µ–π—á–∞—Å: **{level}**"
    )

# ---------- –º–æ–¥–µ–ª–∏ ----------
@dataclass
class Task:
    id: str
    text: str
    options: List[str]
    answer: str
    xp: int = 0
    badge: Optional[str] = None
    explain: Optional[str] = None

# ---------- –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–æ–≤ ----------
def _norm(s: str) -> str:
    return (s or "").strip().casefold()

def _to_tasks(raw_list: List[dict]) -> List[Task]:
    out: List[Task] = []
    for r in raw_list:
        out.append(Task(
            id=r.get("id", ""),
            text=r.get("text", ""),
            options=r.get("options", []),
            answer=r.get("answer", ""),
            xp=int(r.get("xp", 0)),
            badge=r.get("badge"),
            explain=r.get("explain"),
        ))
    return out

TASKS_BY_LEVEL: Dict[str, List[Task]] = {
    "A": _to_tasks(TASKS_A),
    "B": _to_tasks(TASKS_B),
    "HARD": _to_tasks(TASKS_HARD),
}

# ---------- —É—Ç–∏–ª–∏—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä ----------
def answers_kb(options: List[str]) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=opt, callback_data=f"ans:{i}")]
            for i, opt in enumerate(options)]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def level_picker_kb(allowed: Optional[set] = None) -> InlineKeyboardMarkup:
    allowed = allowed or set(ALL_LEVELS)
    btns = []
    if "A" in allowed:
        btns.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å A", callback_data="set_level:A")])
    if "B" in allowed:
        btns.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å B", callback_data="set_level:B")])
    if "HARD" in allowed:
        btns.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å HARD", callback_data="set_level:HARD")])
    return InlineKeyboardMarkup(inline_keyboard=btns)

# ---------- –∞–Ω—Ç–∏-–¥–∞–±–ª-–∫–ª–∏–∫ ----------
# (user_id, level) -> index –≤–æ–ø—Ä–æ—Å–∞
LAST_ANS: Dict[Tuple[int, str], int] = {}


# ---------- —è–¥—Ä–æ –ª–æ–≥–∏–∫–∏ ----------
async def send_question(message: Message, state: FSMContext):
    data = await state.get_data()
    level: str = data.get("level", "A")
    idx: int = data.get("i", 0)
    tasks = TASKS_BY_LEVEL[level]
    total = len(tasks)

    if idx >= total:
        # —Ñ–∏–Ω–∞–ª
        score = int(data.get("score", 0))
        mistakes: List[str] = data.get("mistakes", [])
        portrait = build_portrait(mistakes, score, total, level)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="again")],
            [InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="pick_level")],
            [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"https://t.me/{(await message.bot.me()).username}")]
        ])
        await message.answer(portrait, reply_markup=kb, parse_mode="Markdown")
        return

    task = tasks[idx]
    await message.answer(
        f"–ó–∞–¥–∞–Ω–∏–µ {idx+1}/{total}:\n{task.text}",
        reply_markup=answers_kb(task.options)
    )


async def start_flow(message: Message, state: FSMContext, default_level: str):
    # –µ—Å–ª–∏ –≤ —Å—Ç–µ–π—Ç–µ –µ—â—ë –Ω–µ—Ç —É—Ä–æ–≤–Ω—è ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    data = await state.get_data()
    lvl = data.get("level")
    if not lvl:
        lvl = default_level
        await state.update_data(level=lvl)

    # —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    await state.update_data(i=0, score=0, total=len(TASKS_BY_LEVEL[lvl]), mistakes=[])

    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º! üß†")
    await send_question(message, state)


# =========================================================
#             –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è DP
# =========================================================
def register_handlers(dp: Dispatcher, default_level: str, allowed_levels: set):
    @dp.message(CommandStart())
    async def on_start(message: Message, state: FSMContext):
        # deep-link: /start level_A|level_B|level_HARD
        args = message.text.split(maxsplit=1)[1:] if message.text else []
        if args:
            p = args[0].strip().lower()
            if p in ("level_a", "level_b", "level_hard"):
                lvl = p.split("_")[1].upper()
                if lvl in allowed_levels:
                    await state.update_data(level=lvl)

        hello = (
            "–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ?\n\n"
            "‚Ä¢ 10 –∑–∞–¥–∞–Ω–∏–π ¬∑ 2 –º–∏–Ω—É—Ç—ã\n"
            "‚Ä¢ –°—Ä–∞–∑—É —Ä–∞–∑–±–æ—Ä –∏ —Å–æ–≤–µ—Ç—ã\n\n"
            "–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ‚Äî –∫–Ω–æ–ø–∫–æ–π **¬´–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å¬ª** –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏: "
            "`/level A`, `/level B`, `/level HARD`."
        )
        await message.answer(hello, parse_mode="Markdown")
        await start_flow(message, state, default_level)

    @dp.message(Command("level"))
    async def cmd_level(message: Message, state: FSMContext):
        parts = message.text.split()
        if len(parts) == 2 and parts[1].upper() in ALL_LEVELS and parts[1].upper() in allowed_levels:
            new_level = parts[1].upper()
            await state.update_data(level=new_level, i=0, score=0, mistakes=[], total=len(TASKS_BY_LEVEL[new_level]))
            await message.answer(f"–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ {new_level}.")
            await start_flow(message, state, default_level)
            return
        # –∏–Ω–∞—á–µ –º–µ–Ω—é
        await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_picker_kb(allowed_levels))

    @dp.callback_query(F.data == "pick_level")
    async def on_pick_level(callback: CallbackQuery):
        await callback.message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_picker_kb(allowed_levels))
        await callback.answer()

    @dp.callback_query(F.data.startswith("set_level:"))
    async def on_set_level(callback: CallbackQuery, state: FSMContext):
        _, lvl = callback.data.split(":", 1)
        if lvl not in allowed_levels:
            await callback.answer("–≠—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.", show_alert=True)
            return
        await state.update_data(level=lvl, i=0, score=0, mistakes=[], total=len(TASKS_BY_LEVEL[lvl]))
        await callback.message.answer(f"–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ {lvl}.")
        await callback.answer()
        await start_flow(callback.message, state, default_level)

    @dp.callback_query(F.data == "again")
    async def on_again(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        lvl = data.get("level", default_level)
        await state.update_data(i=0, score=0, mistakes=[], total=len(TASKS_BY_LEVEL[lvl]))
        await callback.answer()
        await start_flow(callback.message, state, default_level)

    @dp.callback_query(F.data.startswith("ans:"))
    async def on_answer(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        level: str = data.get("level", default_level)
        idx: int = data.get("i", 0)
        tasks = TASKS_BY_LEVEL[level]
        total = len(tasks)
        if idx >= total:
            await callback.answer()
            return

        # –∞–Ω—Ç–∏-–¥–∞–±–ª-–∫–ª–∏–∫
        uid = callback.from_user.id
        if LAST_ANS.get((uid, level)) == idx:
            await callback.answer("–û—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–∏–Ω—è—Ç ‚úÖ")
            return
        LAST_ANS[(uid, level)] = idx

        task = tasks[idx]
        # –∫–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–±—Ä–∞–Ω
        try:
            opt_index = int(callback.data.split(":")[1])
        except Exception:
            opt_index = -1

        user_answer = task.options[opt_index] if 0 <= opt_index < len(task.options) else ""
        is_correct = (_norm(user_answer) == _norm(task.answer))

        if is_correct:
            text = f"‚úÖ –í–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.answer}."
            if task.explain:
                text += f"\n{task.explain}"
            new_score = int(data.get("score", 0)) + 1
            await state.update_data(score=new_score)
        else:
            text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.answer}."
            if task.explain:
                text += f"\n{task.explain}"
            # –∫–æ–ø–∏–º ¬´—Ç–∏–ø¬ª –æ—à–∏–±–∫–∏
            mistakes: List[str] = data.get("mistakes", [])
            mistakes.append(_norm(task.answer))
            await state.update_data(mistakes=mistakes)

        await callback.message.answer(text)
        await callback.answer()

        # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await state.update_data(i=idx + 1, total=total)
        await send_question(callback.message, state)


# =========================================================
#                    run & polling
# =========================================================
async def run_single_bot(token: str):
    bot = Bot(token=token)
    dp = Dispatcher(storage=MemoryStorage())

    me = await bot.me()
    bot_id = me.id

    # –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    policy = BOT_LEVEL_POLICY.get(bot_id, {"default": "A", "allowed": set(ALL_LEVELS)})
    default_level = policy.get("default", "A")  # type: ignore
    allowed_levels = set(policy.get("allowed", set(ALL_LEVELS)))  # type: ignore

    register_handlers(dp, default_level, allowed_levels)

    logging.info(f"Starting polling for bot @{me.username} (id={bot_id})")
    await dp.start_polling(bot)


async def main():
    await asyncio.gather(*(run_single_bot(t) for t in TOKENS))


if __name__ == "__main__":
    asyncio.run(main())
