# bot/bot.py
# =======================
# Multi-bot + 3 pools (basic/advanced/hard) ‚Äî aiogram v3
# =======================

import os
import asyncio
import logging
from dataclasses import dataclass
from typing import List, Dict, Tuple

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    DefaultBotProperties,
)
from dotenv import load_dotenv

# ---- –∏–º–ø–æ—Ä—Ç –ø—É–ª–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ ----
# tasks.py -> –±–∞–∑–æ–≤—ã–π, tasks_b.py -> –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π, tasks_hard.py -> —Ö–∞—Ä–¥
from .tasks import TASKS as TASKS_A
from .tasks_b import TASKS_B
from .tasks_hard import TASKS_HARD

# ---------- –º–æ–¥–µ–ª—å –∑–∞–¥–∞–Ω–∏—è ----------
@dataclass
class Task:
    id: str
    text: str
    options: List[str]
    answer: str
    xp: int = 10
    badge: str | None = None
    explain: str | None = None


def normalize_pool(src: List[dict]) -> List[Task]:
    out: List[Task] = []
    for t in src:
        out.append(
            Task(
                id=t["id"],
                text=t["text"],
                options=t["options"],
                answer=t["answer"],
                xp=t.get("xp", 10),
                badge=t.get("badge"),
                explain=t.get("explain"),
            )
        )
    return out


POOLS: Dict[str, List[Task]] = {
    "a": normalize_pool(TASKS_A),       # –ë–∞–∑–æ–≤—ã–π
    "b": normalize_pool(TASKS_B),       # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
    "h": normalize_pool(TASKS_HARD),    # –•–∞—Ä–¥
}

POOL_TITLES = {
    "a": "–ë–∞–∑–æ–≤—ã–π",
    "b": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
    "h": "–•–∞—Ä–¥",
}

# ---------- state –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ ----------
# –∫–ª—é—á ‚Äî (bot_id, user_id)
StateKey = Tuple[int, int]
STATE: Dict[StateKey, Dict] = {}


def skey_from_message(m: Message) -> StateKey:
    return (m.bot.id, m.from_user.id)


def skey_from_callback(cq: CallbackQuery) -> StateKey:
    uid = cq.from_user.id if cq.from_user else 0
    return (cq.bot.id, uid)


def ensure_state(key: StateKey):
    if key not in STATE:
        STATE[key] = {"pool": "a", "idx": 0, "score": 0}


# ---------- UI helpers ----------
def kb_start() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üß™ –ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç", callback_data="start")],
            [InlineKeyboardButton(text="üéö –í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º", callback_data="modes")],
        ]
    )


def kb_modes(current: str) -> InlineKeyboardMarkup:
    rows = []
    for code, title in [("a", "–ë–∞–∑–æ–≤—ã–π"), ("b", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"), ("h", "–•–∞—Ä–¥")]:
        mark = " ‚Ä¢ —Ç–µ–∫—É—â–∏–π" if code == current else ""
        rows.append(
            [InlineKeyboardButton(text=f"{title}{mark}", callback_data=f"mode:{code}")]
        )
    rows.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def kb_options(options: List[str]) -> InlineKeyboardMarkup:
    rows = []
    for i, opt in enumerate(options):
        rows.append([InlineKeyboardButton(text=opt, callback_data=f"ans:{i}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def kb_again() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="again")],
            [InlineKeyboardButton(text="üéö –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="modes")],
        ]
    )


# ---------- –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ª–æ–≥–∏–∫–∏ ----------
async def send_task(message: Message, st: Dict):
    pool_code = st["pool"]
    pool = POOLS[pool_code]
    idx = st["idx"]
    task = pool[idx]

    await message.answer(
        f"<b>–ó–∞–¥–∞–Ω–∏–µ {idx + 1}/{len(pool)}:</b>\n{task.text}",
        reply_markup=kb_options(task.options),
    )


async def finish(message: Message, st: Dict):
    pool = POOLS[st["pool"]]
    total = len(pool)
    score = st["score"]
    await message.answer(
        f"<b>–ì–æ—Ç–æ–≤–æ!</b> –ò—Ç–æ–≥: <b>{score}/{total}</b>\n\n"
        f"–ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–≤–∞—Ç—å –¥—Ä—É–≥–∞ üòâ",
        reply_markup=kb_again(),
    )


# ---------- aiogram handlers ----------
def register_handlers(dp: Dispatcher):
    @dp.message(CommandStart())
    async def on_start(m: Message):
        key = skey_from_message(m)
        ensure_state(key)
        st = STATE[key]
        await m.answer(
            "–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏ ‚úÖ\n\n"
            f"–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ?\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <b>{POOL_TITLES[st['pool']]}</b>",
            reply_markup=kb_start(),
        )

    @dp.callback_query(F.data == "back_to_menu")
    async def back_menu(cq: CallbackQuery):
        key = skey_from_callback(cq)
        ensure_state(key)
        st = STATE[key]
        await cq.message.edit_text(
            "–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ?\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <b>{POOL_TITLES[st['pool']]}</b>",
            reply_markup=kb_start(),
        )
        await cq.answer()

    @dp.callback_query(F.data == "modes")
    async def show_modes(cq: CallbackQuery):
        key = skey_from_callback(cq)
        ensure_state(key)
        st = STATE[key]
        await cq.message.edit_text(
            "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∑–∞–¥–∞—á:",
            reply_markup=kb_modes(st["pool"]),
        )
        await cq.answer()

    @dp.callback_query(F.data.startswith("mode:"))
    async def set_mode(cq: CallbackQuery):
        code = cq.data.split(":", 1)[1]
        if code not in POOLS:
            await cq.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º", show_alert=True)
            return

        key = skey_from_callback(cq)
        ensure_state(key)
        st = STATE[key]
        st["pool"] = code
        st["idx"] = 0
        st["score"] = 0

        await cq.message.edit_text(
            f"–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: <b>{POOL_TITLES[code]}</b>",
            reply_markup=kb_start(),
        )
        await cq.answer("–ì–æ—Ç–æ–≤–æ!")

    @dp.callback_query(F.data == "start")
    async def start_quiz(cq: CallbackQuery):
        key = skey_from_callback(cq)
        ensure_state(key)
        st = STATE[key]
        st["idx"] = 0
        st["score"] = 0

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        await cq.message.edit_text("–ü–æ–µ—Ö–∞–ª–∏! üëá")
        await send_task(cq.message, st)
        await cq.answer()

    @dp.callback_query(F.data.startswith("ans:"))
    async def answer(cq: CallbackQuery):
        key = skey_from_callback(cq)
        ensure_state(key)
        st = STATE[key]
        pool = POOLS[st["pool"]]
        idx = st["idx"]
        task = pool[idx]

        try:
            choice_idx = int(cq.data.split(":", 1)[1])
        except Exception:
            await cq.answer("–û—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç", show_alert=True)
            return

        choice_text = task.options[choice_idx].casefold()
        correct = (choice_text == task.answer.casefold())

        # –æ—Ç–≤–µ—Ç-—Ñ–∏–¥–±–µ–∫
        if correct:
            st["score"] += 1
            msg = "‚úÖ <b>–í–µ—Ä–Ω–æ!</b>"
        else:
            msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{task.answer}</b>."

        if task.explain:
            msg += f"\n{task.explain}"

        await cq.message.answer(msg)

        # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        st["idx"] += 1
        if st["idx"] >= len(pool):
            await finish(cq.message, st)
        else:
            await send_task(cq.message, st)

        await cq.answer()

    @dp.callback_query(F.data == "again")
    async def again(cq: CallbackQuery):
        key = skey_from_callback(cq)
        ensure_state(key)
        st = STATE[key]
        st["idx"] = 0
        st["score"] = 0
        await cq.message.edit_text("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ üëá")
        await send_task(cq.message, st)
        await cq.answer()


# ---------- –∑–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ—Ç–æ–≤ ----------
async def run_single_bot(token: str):
    # –≤–∞–∂–Ω–æ: parse_mode —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ DefaultBotProperties ‚Äî —ç—Ç–æ aiogram v3.7+
    bot = Bot(token=token, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=MemoryStorage())
    register_handlers(dp)

    me = await bot.get_me()
    logging.info(f"Starting polling for @{me.username} (id={me.id})")
    await dp.start_polling(bot)


async def main():
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s"
    )
    load_dotenv()

    tokens: List[str] = []
    for env_key in ("BOT_TOKEN", "BOT_TOKEN2"):
        val = os.getenv(env_key, "").strip()
        if val:
            tokens.append(val)

    if not tokens:
        raise RuntimeError("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω –≤ env: BOT_TOKEN / BOT_TOKEN2")

    masked = ["*" * 6 + t[-6:] for t in tokens]
    logging.info(f"Tokens found: {len(tokens)} -> {masked}")

    await asyncio.gather(*(run_single_bot(t) for t in tokens))


if __name__ == "__main__":
    asyncio.run(main())
