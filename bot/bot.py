# bot.py
# =======================
# Multi-bot + no-keyboard-popup edition (aiogram v3)
# =======================

import os
import asyncio
import logging
from dataclasses import dataclass
from typing import List, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import CommandStart
from dotenv import load_dotenv

# ------------ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ –∏ env ------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)
load_dotenv()

# ------------ —Å–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ (1 –∏–ª–∏ 2) ------------
TOKENS: List[str] = []
for key in ("BOT_TOKEN", "BOT_TOKEN2"):
    t = os.getenv(key, "").strip()
    if t:
        TOKENS.append(t)

if not TOKENS:
    raise RuntimeError(
        "–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤. –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã BOT_TOKEN (–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ BOT_TOKEN2) –≤ Variables."
    )

# –æ–¥–∏–Ω –æ–±—â–∏–π Dispatcher –∏ –ø–∞–º—è—Ç—å
dp = Dispatcher(storage=MemoryStorage())

# --------------------- –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö ---------------------
@dataclass
class Task:
    id: str
    text: str
    options: List[str]
    answer: str  # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–∫–∞–∫ —Ç–µ–∫—Å—Ç –∏–∑ options)

# –ü—Ä–∏–º–µ—Ä –º–∏–Ω–∏-–Ω–∞–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π.
# –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ‚Äî —Ñ–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ.
TASKS: List[Task] = [
    Task(
        id="A1",
        text="¬´–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –∑–æ–Ω—Ç = –ø—Ä–∏—á–∏–Ω–∞ –¥–æ–∂–¥—è. –ß—Ç–æ —ç—Ç–æ?¬ª",
        options=["–ü—Ä–∏—á–∏–Ω–∞", "–°–ª–µ–¥—Å—Ç–≤–∏–µ", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è"],
        answer="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è",
    ),
    Task(
        id="A2",
        text="¬´–≠–∫—Å–ø–µ—Ä—Ç –ø–æ–ø—É–ª—è—Ä–µ–Ω, –∑–Ω–∞—á–∏—Ç –ø—Ä–∞–≤. –ß—Ç–æ —ç—Ç–æ?¬ª",
        options=["–ê–ø–µ–ª–ª—è—Ü–∏—è –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É", "–§–∞–∫—Ç", "–ê—Ä–≥—É–º–µ–Ω—Ç"],
        answer="–ê–ø–µ–ª–ª—è—Ü–∏—è –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É",
    ),
    Task(
        id="A3",
        text="¬´–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥ —É–ª—É—á—à–∞–µ—Ç –∑—Ä–µ–Ω–∏–µ¬ª. –ß—Ç–æ —ç—Ç–æ?",
        options=["–ì–∏–ø–æ—Ç–µ–∑–∞", "–§–∞–∫—Ç", "–ü—Ä–∏—á–∏–Ω–∞"],
        answer="–ì–∏–ø–æ—Ç–µ–∑–∞",
    ),
]

# --------------- —É—Ç–∏–ª–∏—Ç—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤—ã ---------------
def build_inline_kb_and_labels(options: List[str], block: str = "main") -> InlineKeyboardMarkup:
    """
    –î–µ–ª–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞.
    callback_data: "opt:<index>"
    """
    rows = [
        [InlineKeyboardButton(text=f"{i+1}) {opt}", callback_data=f"opt:{i}")]
        for i, opt in enumerate(options)
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def normalize_text(s: str) -> str:
    return (s or "").strip().lower()

# ------------------- –ø–æ–∫–∞–∑ –∑–∞–¥–∞–Ω–∏—è (edit) -------------------
async def send_task(m: Message, state: FSMContext, task: Task):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º (–∏–ª–∏ –ø–µ—Ä–µ-–ø–æ–∫–∞–∑—ã–≤–∞–µ–º) –∑–∞–¥–∞–Ω–∏–µ *—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º* –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
    —á—Ç–æ–±—ã –Ω–∞ Android –Ω–µ ¬´–≤—Å–∫–∞–∫–∏–≤–∞–ª–∞¬ª —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    kb = build_inline_kb_and_labels(task.options, "main")
    data = await state.get_data()
    last_id: Optional[int] = data.get("last_msg_id")

    text = f"–ó–∞–¥–∞–Ω–∏–µ {task.id}:\n{task.text}"

    if last_id:
        try:
            await m.bot.edit_message_text(
                chat_id=m.chat.id,
                message_id=last_id,
                text=text,
                reply_markup=kb,
            )
            return
        except Exception:
            pass  # –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ –∏ –æ–±–Ω–æ–≤–∏–º last_msg_id

    msg = await m.answer(text, reply_markup=kb)
    await state.update_data(last_msg_id=msg.message_id)

# -------------------- –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ----------------------
def resolve_choice_by_text(task: Task, user_text: str) -> Optional[int]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–ª–∏ None.
    """
    t = normalize_text(user_text)
    if not t:
        return None
    for i, opt in enumerate(task.options):
        if normalize_text(opt) == t:
            return i
    return None

async def process_choice_and_continue(
    *,
    chat_message: Message,
    state: FSMContext,
    task_index: int,
    choice_index: int
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –≤–µ—Ä–Ω–æ/–Ω–µ—Ç + –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é.
    –í—Å—ë ‚Äî —á–µ—Ä–µ–∑ edit_message_text.
    """
    task = TASKS[task_index]
    is_correct = normalize_text(task.options[choice_index]) == normalize_text(task.answer)

    if is_correct:
        feedback = f"‚úÖ –í–µ—Ä–Ω–æ!\n\n"
    else:
        feedback = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n\n"

    # —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    text = feedback

    # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ª–∏–±–æ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –ª–∏–±–æ —Ñ–∏–Ω–∞–ª
    next_index = task_index + 1
    if next_index < len(TASKS):
        next_task = TASKS[next_index]
        text += f"–ó–∞–¥–∞–Ω–∏–µ {next_task.id}:\n{next_task.text}"
        kb = build_inline_kb_and_labels(next_task.options, "main")
        await state.update_data(task_index=next_index)

        data = await state.get_data()
        last_id = data.get("last_msg_id") or chat_message.message_id
        try:
            await chat_message.bot.edit_message_text(
                chat_id=chat_message.chat.id,
                message_id=last_id,
                text=text,
                reply_markup=kb,
            )
        except Exception:
            msg = await chat_message.answer(text, reply_markup=kb)
            await state.update_data(last_msg_id=msg.message_id)
    else:
        text += "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ! üôå"
        data = await state.get_data()
        last_id = data.get("last_msg_id") or chat_message.message_id
        try:
            await chat_message.bot.edit_message_text(
                chat_id=chat_message.chat.id,
                message_id=last_id,
                text=text,
                reply_markup=None,
            )
        except Exception:
            msg = await chat_message.answer(text)
            await state.update_data(last_msg_id=msg.message_id)

# --------------------- handlers ----------------------------
@dp.message(CommandStart())
async def cmd_start(m: Message, state: FSMContext):
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ ¬´—è–∫–æ—Ä–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.clear()
    await state.update_data(task_index=0, last_msg_id=None)

    # –ø—Ä–∏—Å—ã–ª–∞–µ–º –æ–¥–Ω–æ ¬´—è–∫–æ—Ä–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º)
    intro = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–∏–Ω–∏-—Ç–µ—Å—Ç –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ. –í—ã–±–∏—Ä–∞–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö üëá"
    msg = await m.answer(intro)
    await state.update_data(last_msg_id=msg.message_id)

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    await send_task(m, state, TASKS[0])

# –í—ã–±–æ—Ä –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–µ
@dp.callback_query(F.data.startswith("opt:"))
async def on_option_callback(call: CallbackQuery, state: FSMContext):
    await call.answer()  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, –ù–ò–ß–ï–ì–û –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    data = await state.get_data()
    task_index: int = data.get("task_index", 0)

    try:
        choice_index = int(call.data.split(":", 1)[1])
    except Exception:
        return

    await process_choice_and_continue(
        chat_message=call.message,
        state=state,
        task_index=task_index,
        choice_index=choice_index,
    )

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –¢–ï–ö–°–¢–û–ú ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å –æ–ø—Ü–∏—è–º–∏.
@dp.message()
async def on_free_text(m: Message, state: FSMContext):
    data = await state.get_data()
    task_index: int = data.get("task_index", 0)
    if task_index >= len(TASKS):
        return  # —É–∂–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç

    task = TASKS[task_index]
    choice_index = resolve_choice_by_text(task, m.text)

    if choice_index is None:
        # –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¢–ï–ú –ñ–ï —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–±–µ–∑ –ø–æ–¥–Ω—è—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã)
        await send_task(m, state, task)
        return

    await process_choice_and_continue(
        chat_message=m,
        state=state,
        task_index=task_index,
        choice_index=choice_index,
    )

# -------------------- multi-bot bootstrap -------------------
async def _prepare_bot(token: str) -> Bot:
    """
    –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ –∏ —Å–Ω–∏–º–∞–µ–º webhook, —á—Ç–æ–±—ã polling —Ç–æ—á–Ω–æ –ø–æ–ª—É—á–∏–ª –∞–ø–¥–µ–π—Ç—ã.
    """
    bot = Bot(token)
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        me = await bot.get_me()
        logging.info(f"Webhook cleared for @{me.username} (id={me.id})")
    except Exception as e:
        logging.exception(f"delete_webhook failed for token ...{token[-6:]}: {e}")
    return bot

async def main():
    bots = [await _prepare_bot(t) for t in TOKENS]
    # –∑–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω dp –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    await asyncio.gather(*[dp.start_polling(b) for b in bots])

if __name__ == "__main__":
    asyncio.run(main())
