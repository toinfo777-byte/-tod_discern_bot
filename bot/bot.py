# bot/bot.py
# ============================================
# Multi-bot (A/B/HARD) ‚Äî aiogram v3
# c –∞–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥–æ–º (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π)
# ============================================

import os
import asyncio
import logging
from dataclasses import dataclass
from typing import List, Dict, Tuple, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

# --- –ø—É–ª—ã –≤–æ–ø—Ä–æ—Å–æ–≤ ---
# tasks.py   -> —É—Ä–æ–≤–µ–Ω—å A (–±–∞–∑–æ–≤—ã–π)
# tasks_b.py -> —É—Ä–æ–≤–µ–Ω—å B (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)
# tasks_hard.py -> HARD (—É—Å–ª–æ–∂–Ω—ë–Ω–Ω—ã–π)
from .tasks import TASKS_A
from .tasks_b import TASKS_B
# –§–∞–π–ª —Å ¬´—Ö–∞—Ä–¥–æ–º¬ª –Ω–∞–∑—ã–≤–∞–π—Ç–µ –∫–∞–∫ —É –≤–∞—Å –≤ —Ä–µ–ø–æ: tasks_hard.py
# –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏–∑ –Ω–µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TASKS_HARD
from .tasks_hard import TASKS_HARD

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)

# --- –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è/—É—Ç–∏–ª–∏—Ç—ã -----------------------------------------------------
def _norm(s: str) -> str:
    return (s or "").strip().casefold()

def answers_kb(options: List[str]) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text=opt, callback_data=f"ans:{_norm(opt)}")]
        for opt in options
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def level_picker_kb(allowed: Optional[Tuple[str, ...]] = None) -> InlineKeyboardMarkup:
    allowed = allowed or ("A", "B", "HARD")
    btns = []
    if "A" in allowed:
        btns.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å A", callback_data="pick_level:A")])
    if "B" in allowed:
        btns.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å B", callback_data="pick_level:B")])
    if "HARD" in allowed:
        btns.append([InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å HARD", callback_data="pick_level:HARD")])
    return InlineKeyboardMarkup(inline_keyboard=btns)

def after_result_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="restart")],
        [InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="change_level")],
        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç ¬´—à—ç—Ä–∏–Ω–≥¬ª –∏–∑ –±–æ—Ç–∞; –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –∫–Ω–æ–ø–∫—É-¬´—Ä–∞—Å–∫—Ä—ã–≤–∞—à–∫—É¬ª
        [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share_info")]
    ])

# --- ¬´–∫–∞—Ç–∞–ª–æ–≥¬ª –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π ---------------------------------------------------
ALL_LEVELS: Tuple[str, ...] = ("A", "B", "HARD")

# –ü–æ–ª–∏—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ bot.id (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –±–æ—Ç—ã!)
# 8222973157 ‚Äî @tod_discern_bot
# 8416181261 ‚Äî @discernment_test_bot
BOT_LEVEL_POLICY: Dict[int, Dict[str, object]] = {
    8222973157: {"default": "A", "allowed": ("A", "B", "HARD")},
    8416181261: {"default": "B", "allowed": ("B", "HARD")},
}

# --- ¬´—Å–ª–æ–≤–∞—Ä—å¬ª –ø—É–ª–æ–≤ ----------------------------------------------------------
LEVEL_TASKS: Dict[str, List[dict]] = {
    "A": TASKS_A,
    "B": TASKS_B,
    "HARD": TASKS_HARD,
}

# --- —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏ ------------------------------------------
@dataclass
class UserRun:
    level: str = "A"
    current_index: int = 0
    total: int = 10
    task_ids: List[str] = None
    # –∞–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥: —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ø–æ —Ç–æ–º—É –∂–µ –≤–æ–ø—Ä–æ—Å—É
    answered: bool = False

# --- —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---------------------------------------------------------
INTRO = (
    "–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ?\n\n"
    "‚Ä¢ 10 –∑–∞–¥–∞–Ω–∏–π ¬∑ 2 –º–∏–Ω—É—Ç—ã\n"
    "‚Ä¢ –°—Ä–∞–∑—É —Ä–∞–∑–±–æ—Ä –∏ —Å–æ–≤–µ—Ç—ã\n\n"
    "–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ‚Äî –∫–Ω–æ–ø–∫–æ–π **–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å** –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏: /level_A, /level_B, /level_HARD.\n\n"
    "–ù–∞—á–∏–Ω–∞–µ–º! üß†"
)

async def send_task(msg: Message, task: dict, index: int):
    text = f"–ó–∞–¥–∞–Ω–∏–µ {index + 1}/10:\n{task['text']}"
    await msg.answer(text, reply_markup=answers_kb(task["options"]))

def calc_profile_summary(stats: Dict[str, int]) -> str:
    if not stats:
        return "–û—à–∏–±–æ–∫ –Ω–µ—Ç ‚Äî –æ—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ."
    lines = ["**–ì–¥–µ —á–∞—â–µ –ø—Ä–æ–º–∞—Ö–∏:**"]
    for k, v in sorted(stats.items(), key=lambda x: -x[1]):
        lines.append(f"‚Ä¢ {k} ‚Äî {v}√ó")
    return "\n".join(lines)

def advice_block(stats: Dict[str, int]) -> str:
    adv: List[str] = []
    # –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
    if stats.get("–º–∞–ª—ã–π_—Ä–∞–∑–º–µ—Ä_–≤—ã–±–æ—Ä–∫–∏"):
        adv.append("–ú–∞–ª–µ–Ω—å–∫–∏–µ –≤—ã–±–æ—Ä–∫–∏ —à—É–º–Ω—ã–µ ‚Äî –¥–æ–≤–µ—Ä—è–π —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è–º/–º–µ—Ç–∞–∞–Ω–∞–ª–∏–∑–∞–º.")
    if stats.get("post_hoc") or stats.get("–ª–æ–∂–Ω–∞—è_–ø—Ä–∏—á–∏–Ω–∞"):
        adv.append("–ó–∞–º–µ–¥–ª—è–π—Å—è –Ω–∞ –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç–∏: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚â† –ø—Ä–∏—á–∏–Ω–∞.")
    if stats.get("–ø–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ_–±—Ä–µ–º–µ–Ω–∏_–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"):
        adv.append("–¢—Ä–µ–±—É–π –º–µ—Ç–æ–¥/–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –∞ –Ω–µ —Å—Ç–∞—Ç—É—Å/–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å.")
    if not adv:
        adv.append("–•–æ—Ä–æ—à–µ–µ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ! –ò–Ω–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ª–æ–≤–∏—Ç—å—Å—è –Ω–∞ —Ç–æ–Ω–∫–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
    return "**–°–æ–≤–µ—Ç—ã:**\n" + "\n".join(f"‚Ä¢ {a}" for a in adv)

def normalize_key(answer_text: str) -> str:
    # –ø—Ä–∏–≤–æ–¥–∏–º ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ¬ª —è—Ä–ª—ã–∫–∏ –∫ ¬´–∫–ª—é—á–∞–º¬ª –¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    return (
        _norm(answer_text)
        .replace(" ", "_")
        .replace("—ë", "–µ")
    )

# --- —Ö—ç–Ω–¥–ª–µ—Ä—ã -----------------------------------------------------------------
def setup_handlers(dp: Dispatcher, bot_id: int):

    def _bot_policy() -> Tuple[str, Tuple[str, ...]]:
        policy = BOT_LEVEL_POLICY.get(bot_id, {"default": "A", "allowed": ALL_LEVELS})
        return policy["default"], tuple(policy["allowed"])

    @dp.message(CommandStart())
    async def on_start(m: Message, state: FSMContext):
        default_level, _ = _bot_policy()
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–≥–∞
        run = UserRun(level=default_level, current_index=0, total=10, task_ids=[], answered=False)
        await state.update_data(run=run.__dict__, stats={})
        await m.answer(INTRO, parse_mode=None)  # –±–µ–∑ parse_mode –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        # —Å—Ç–∞—Ä—Ç—É–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        tasks = LEVEL_TASKS[run.level][: run.total]
        await state.update_data(task_list=tasks)
        await send_task(m, tasks[0], 0)

    # –ë—ã—Å—Ç—Ä—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ —É—Ä–æ–≤–Ω–µ–π
    @dp.message(F.text.in_({"/level", "/level_A", "/level_B", "/level_HARD"}))
    async def on_level_cmd(m: Message, state: FSMContext):
        _default, allowed = _bot_policy()
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤–∏–¥–∞ /level_X ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏–º —Å—Ä–∞–∑—É
        txt = (m.text or "").strip().lower()
        mapping = {"/level_a": "A", "/level_b": "B", "/level_hard": "HARD"}
        if txt in mapping:
            new_level = mapping[txt]
            if new_level in allowed:
                data = await state.get_data()
                run_d = data.get("run", {})
                run_d.update(level=new_level, current_index=0, answered=False)
                await state.update_data(run=run_d, stats={}, task_list=LEVEL_TASKS[new_level][:10])
                await m.answer(f"–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ {new_level}.")
                await m.answer("–ù–∞—á–∏–Ω–∞–µ–º! üß†")
                await send_task(m, LEVEL_TASKS[new_level][0], 0)
                return

        # –∏–Ω–∞—á–µ –ø–æ–∫–∞–∂–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞
        await m.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_picker_kb(allowed))

    @dp.callback_query(F.data == "change_level")
    async def on_change_level(cb: CallbackQuery, state: FSMContext):
        _default, allowed = _bot_policy()
        await cb.message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_picker_kb(allowed))
        await cb.answer()

    @dp.callback_query(F.data.startswith("pick_level:"))
    async def on_pick_level(cb: CallbackQuery, state: FSMContext):
        _default, allowed = _bot_policy()
        new_level = cb.data.split(":", 1)[1]
        if new_level not in allowed:
            await cb.answer("–≠—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞", show_alert=True)
            return
        data = await state.get_data()
        run_d = data.get("run", {})
        run_d.update(level=new_level, current_index=0, answered=False)
        await state.update_data(run=run_d, stats={}, task_list=LEVEL_TASKS[new_level][:10])
        await cb.message.answer(f"–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ {new_level}.")
        await cb.message.answer("–ù–∞—á–∏–Ω–∞–µ–º! üß†")
        await send_task(cb.message, LEVEL_TASKS[new_level][0], 0)
        await cb.answer()

    @dp.callback_query(F.data == "restart")
    async def on_restart(cb: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        run_d = data.get("run", {})
        level = run_d.get("level", "A")
        run_d.update(current_index=0, answered=False)
        await state.update_data(run=run_d, stats={}, task_list=LEVEL_TASKS[level][:10])
        await cb.message.answer("–ü–æ–µ—Ö–∞–ª–∏ –µ—â—ë —Ä–∞–∑! üß†")
        await send_task(cb.message, LEVEL_TASKS[level][0], 0)
        await cb.answer()

    @dp.callback_query(F.data == "share_info")
    async def on_share(cb: CallbackQuery):
        await cb.answer("–°–∫–æ–ø–∏—Ä—É–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏ –∫–∏–Ω—å –¥—Ä—É–≥—É. –£–≤–∏–¥–∏–º—Å—è –≤ –±–æ—Ç–µ ‚úåÔ∏è", show_alert=True)

    # --- –ì–õ–ê–í–ù–´–ô –§–ò–ö–°: –∞–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥ ------------------------------------------
    @dp.callback_query(F.data.startswith("ans:"))
    async def handle_answer(cb: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        run_d: dict = data.get("run", {}) or {}
        task_list: List[dict] = data.get("task_list", []) or []
        stats: Dict[str, int] = data.get("stats", {}) or {}

        idx = int(run_d.get("current_index", 0))
        answered = bool(run_d.get("answered", False))

        # –µ—Å–ª–∏ —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å ‚Äî –∏–≥–Ω–æ—Ä–∏–º –ø–æ–≤—Ç–æ—Ä
        if answered:
            await cb.answer("–û—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–∏–Ω—è—Ç ‚úÖ")
            return

        # –∑–∞—â–∏—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Å —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
        run_d["answered"] = True

        if idx >= len(task_list):
            await cb.message.answer("–¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ")
            await state.update_data(run=run_d)  # –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–º
            await cb.answer()
            return

        task = task_list[idx]
        correct = _norm(task["answer"])
        user_ans = cb.data.split(":", 1)[1]

        if user_ans == correct:
            await cb.message.answer(f"‚úÖ –í–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}\n\n{task['explain']}")
        else:
            await cb.message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}\n\n{task['explain']}")
            key = normalize_key(task["answer"])
            stats[key] = stats.get(key, 0) + 1

        idx += 1
        if idx < len(task_list):
            # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            run_d["current_index"] = idx
            run_d["answered"] = False  # —Å–±—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            await state.update_data(run=run_d, stats=stats)
            await send_task(cb.message, task_list[idx], idx)
        else:
            # —Ñ–∏–Ω–∞–ª–∫–∞
            summary = calc_profile_summary(stats)
            adv = advice_block(stats)
            await cb.message.answer(
                f"–ì–æ—Ç–æ–≤–æ! –ò—Ç–æ–≥: {sum(1 for _ in task_list) - sum(stats.values())}/{len(task_list)}\n\n{summary}\n\n{adv}",
                reply_markup=after_result_kb()
            )
            # –ù–µ –æ—á–∏—â–∞–µ–º state –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º ¬´run¬ª –∏ ¬´level¬ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞/—Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è
            run_d["current_index"] = 0
            run_d["answered"] = False
            await state.update_data(run=run_d, stats={})

        await cb.answer()

# --- –∑–∞–ø—É—Å–∫ –¥–≤—É—Ö –±–æ—Ç–æ–≤ --------------------------------------------------------
async def run_single_bot(token: str):
    bot = Bot(token=token)  # –±–µ–∑ parse_mode —Ä–∞–¥–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å 3.6/3.7
    me = await bot.get_me()
    dp = Dispatcher(storage=MemoryStorage())
    setup_handlers(dp, me.id)
    logging.info("Starting polling for bot‚Ä¶")
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

async def main():
    tokens = []
    # Railway env:
    t1 = os.getenv("BOT_TOKEN")
    t2 = os.getenv("BOT_TOKEN2")
    if t1:
        tokens.append(t1)
    if t2:
        tokens.append(t2)

    if not tokens:
        logging.error("–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ BOT_TOKEN / BOT_TOKEN2")
        return

    logging.info(f"Starting polling for {len(tokens)} bot(s).")
    await asyncio.gather(*(run_single_bot(t) for t in tokens))

if __name__ == "__main__":
    asyncio.run(main())
