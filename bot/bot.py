# bot/bot.py
# ===============================
# Multi-bot + —É—Ä–æ–≤–Ω–∏ (A/B/HARD)  ‚Äî aiogram v3
# –¢–æ–ª–µ—Ä–∞–Ω—Ç–µ–Ω –∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é tasks_hard.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TASKS_HARD
# ===============================

import os
import asyncio
import logging
from dataclasses import dataclass
from typing import List, Dict, Tuple, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from dotenv import load_dotenv

# ---------- –∏–º–ø–æ—Ä—Ç –ø—É–ª–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ ----------
def _import_tasks_module(path: str):
    try:
        return __import__(f"bot.{path}", fromlist=["*"])
    except Exception:
        try:
            return __import__(path, fromlist=["*"])
        except Exception:
            return None  # –º–æ–¥—É–ª—è –Ω–µ—Ç –≤–æ–≤—Å–µ

def _resolve_tasks_var_soft(mod, names: List[str]) -> List[Dict]:
    """–í–µ—Ä–Ω—ë—Ç [] –µ—Å–ª–∏ –º–æ–¥—É–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö."""
    if mod is None:
        return []
    for name in names:
        if hasattr(mod, name):
            return getattr(mod, name)
    return []

_m_a = _import_tasks_module("tasks")
_m_b = _import_tasks_module("tasks_b")
_m_h = _import_tasks_module("tasks_hard")

TASKS_A_RAW = _resolve_tasks_var_soft(_m_a, ["TASKS_A", "TASKS"])
TASKS_B_RAW = _resolve_tasks_var_soft(_m_b, ["TASKS_B", "TASKS"])
TASKS_HARD_RAW = _resolve_tasks_var_soft(_m_h, ["TASKS_HARD", "TASKS"])

# ---------- –º–æ–¥–µ–ª—å –≤–æ–ø—Ä–æ—Å–∞ ----------
@dataclass
class Task:
    id: str
    text: str
    options: List[str]
    answer: str
    xp: int = 10
    badge: Optional[str] = None
    explain: Optional[str] = None

def _normalize_pool(raw: List[Dict]) -> List[Task]:
    out: List[Task] = []
    for it in raw:
        out.append(Task(
            id=str(it.get("id", "")),
            text=str(it.get("text", "")),
            options=list(it.get("options", [])),
            answer=str(it.get("answer", "")),
            xp=int(it.get("xp", 10)),
            badge=it.get("badge"),
            explain=it.get("explain"),
        ))
    return out

POOL_A: List[Task] = _normalize_pool(TASKS_A_RAW)
POOL_B: List[Task] = _normalize_pool(TASKS_B_RAW)
POOL_H: List[Task] = _normalize_pool(TASKS_HARD_RAW)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
ALL_LEVELS = ("A", "B", "HARD")
LEVEL_LABELS = {"A": "–ë–∞–∑–æ–≤—ã–π", "B": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "HARD": "–•–∞—Ä–¥"}

def get_pool(level: str) -> List[Task]:
    return {"A": POOL_A, "B": POOL_B, "HARD": POOL_H}.get(level, [])

def available_levels() -> List[str]:
    levels = []
    if POOL_A: levels.append("A")
    if POOL_B: levels.append("B")
    if POOL_H: levels.append("HARD")
    return levels or ["A"]  # —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª —Ö–æ—Ç—å –æ–¥–∏–Ω

# ---------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def kb_levels() -> InlineKeyboardMarkup:
    rows = []
    for lv in available_levels():
        rows.append([InlineKeyboardButton(
            text=f"–£—Ä–æ–≤–µ–Ω—å {lv} ‚Äî {LEVEL_LABELS[lv]}",
            callback_data=f"level:{lv}"
        )])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_options(opts: List[str]) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=opt, callback_data=f"opt:{opt}")] for opt in opts]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_retry() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="retry")],
        [InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="levels")],
    ])

# ---------- –ø–æ—Ä—Ç—Ä–µ—Ç –ø–æ –∏—Ç–æ–≥–∞–º ----------
def make_portrait(score: int, total: int) -> str:
    if score <= 3:
        return "–¢—ã –ø–æ–∫–∞ –ª–µ–≥–∫–æ –¥–æ–≤–µ—Ä—è–µ—à—å —Å–ª–æ–≤–∞–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ù–µ–º–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏ ‚Äî –∏ –±—É–¥–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å."
    if score <= 6:
        return "–¢—ã —á–∞—Å—Ç–æ –∑–∞–º–µ—á–∞–µ—à—å —É–ª–æ–≤–∫–∏, –Ω–æ –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–∏—ë–º–∞—Ö –∏–Ω–æ–≥–¥–∞ —Å–ø–æ—Ç—ã–∫–∞–µ—à—å—Å—è."
    if score <= 9:
        return "–•–æ—Ä–æ—à–µ–µ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ! –ò–Ω–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ª–æ–≤–∏—Ç—å—Å—è –Ω–∞ —Ç–æ–Ω–∫–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è."
    return "–ú–∞—Å—Ç–µ—Ä —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è üí°. –§–µ–π–∫–∏ —Ç–µ–±–µ –Ω–µ —Å—Ç—Ä–∞—à–Ω—ã."

# ---------- —Å–æ—Å—Ç–æ—è–Ω–∏–µ ----------
async def start_quiz(m: Message, state: FSMContext, level: str):
    # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    if level not in available_levels():
        level = available_levels()[0]

    pool = get_pool(level)
    await state.update_data(level=level, idx=0, score=0)

    if not pool:
        await m.answer("–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π:", reply_markup=kb_levels())
        return

    await m.answer(
        "–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ?\n\n"
        f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {LEVEL_LABELS[level]}",
        reply_markup=kb_levels()
    )
    task = pool[0]
    await m.answer(f"–ó–∞–¥–∞–Ω–∏–µ 1/{len(pool)}:\n{task.text}", reply_markup=kb_options(task.options))

async def ask_next(m_or_cq, state: FSMContext):
    data = await state.get_data()
    level = data.get("level", "A")
    idx = int(data.get("idx", 0))
    score = int(data.get("score", 0))
    pool = get_pool(level)

    if idx >= len(pool):
        portrait = make_portrait(score, len(pool))
        sender = m_or_cq.message.answer if isinstance(m_or_cq, CallbackQuery) else m_or_cq.answer
        await sender(f"–ì–æ—Ç–æ–≤–æ! –ò—Ç–æ–≥: {score}/{len(pool)}\n\n{portrait}", reply_markup=kb_retry())
        return

    task = pool[idx]
    sender = m_or_cq.message.answer if isinstance(m_or_cq, CallbackQuery) else m_or_cq.answer
    await sender(f"–ó–∞–¥–∞–Ω–∏–µ {idx+1}/{len(pool)}:\n{task.text}", reply_markup=kb_options(task.options))

# ---------- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
dp = Dispatcher(storage=MemoryStorage())

@dp.message(CommandStart())
async def cmd_start(m: Message, state: FSMContext):
    await start_quiz(m, state, available_levels()[0])

@dp.callback_query(F.data == "levels")
async def show_levels(cq: CallbackQuery):
    await cq.message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=kb_levels())
    await cq.answer()

@dp.callback_query(F.data.startswith("level:"))
async def change_level(cq: CallbackQuery, state: FSMContext):
    level = cq.data.split(":", 1)[1]
    await state.clear()
    await start_quiz(cq.message, state, level)
    await cq.answer(f"–£—Ä–æ–≤–µ–Ω—å: {LEVEL_LABELS.get(level, level)}")

@dp.callback_query(F.data == "retry")
async def retry_test(cq: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    level = data.get("level", available_levels()[0])
    await state.clear()
    await start_quiz(cq.message, state, level)
    await cq.answer("–ü–æ–µ—Ö–∞–ª–∏ –µ—â—ë —Ä–∞–∑!")

@dp.callback_query(F.data.startswith("opt:"))
async def answer_option(cq: CallbackQuery, state: FSMContext):
    chosen = cq.data.split(":", 1)[1]
    data = await state.get_data()
    level = data.get("level", available_levels()[0])
    idx = int(data.get("idx", 0))
    score = int(data.get("score", 0))
    pool = get_pool(level)

    if idx >= len(pool):
        await cq.answer("–¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return

    task = pool[idx]
    is_correct = (chosen.strip().casefold() == task.answer.strip().casefold())

    if is_correct:
        score += 1
        msg = f"‚úÖ –í–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.answer}."
    else:
        msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.answer}."
    if task.explain:
        msg += f"\n{task.explain}"

    await cq.message.answer(msg)
    idx += 1
    await state.update_data(idx=idx, score=score)
    await cq.answer()
    await ask_next(cq, state)

# ---------- –∑–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ—Ç–æ–≤ ----------
async def run_single_bot(token: str):
    bot = Bot(token=token)  # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –≤–µ—Ä—Å–∏—è–º–∏ aiogram <3.7
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info(f"Starting polling for bot ***{token[-6:]}")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

async def main():
    logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
    load_dotenv()

    tokens: List[str] = []
    for key in ("BOT_TOKEN", "BOT_TOKEN2"):
        t = os.getenv(key, "").strip()
        if t:
            tokens.append(t)
    if not tokens:
        raise RuntimeError("–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤. –î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN (–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ BOT_TOKEN2) –≤ Variables.")

    await asyncio.gather(*(run_single_bot(t) for t in tokens))

if __name__ == "__main__":
    asyncio.run(main())
